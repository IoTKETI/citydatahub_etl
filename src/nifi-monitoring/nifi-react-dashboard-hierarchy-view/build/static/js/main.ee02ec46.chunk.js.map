{"version":3,"sources":["logo.svg","hoc/Aux/Aux.js","axios-spring-boot-api-instance.js","Endpoints.js","components/NifiProcessor/NifiProcessorDetail/NifiProcessorDetail.js","components/NifiConnection/NifiConnectionDetail/NifiConnectionDetail.js","TableColumns.js","components/NifiProcessGroup/NifiProcessGroup.js","components/Dashboard/Dashboard.js","components/NifiRegistry/NifiRegistryBucket/NifiRegistryBucket.js","components/NifiRegistry/NifiRegistryItem/NifiRegistryItem.js","components/NifiRemoteProcessGroup/NifiRemoteProcessGroup.js","components/NifiProcessor/NifiProcessor.js","components/NifiConnection/NifiConnection.js","components/NifiOutputPort/NifiOutputPort.js","components/NifiInputPort/NifiInputPort.js","components/NifiInstance/HierarchyView/NifiFlowDetail.js","components/NifiInstance/HierarchyView/NifiFlowHierarchyView2ResizeBox2.js","components/NifiTemplate/UploadTemplate.js","components/NifiInstance/HierarchyView/NifiFlowDetailSearch.js","components/SearchProcessor/SearchProcessor.js","hoc/Layout/MainLayout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","axios_spring_boot_api_instance","axios","create","baseURL","window","_env_","API_URL","API_PORT","headers","withCredentials","FLOW_BY_ID","PROCESS_GROUP","SEARCH","LINK_TO_NIFI_INSTANCE","NIFI_INSTANCE_URL","NIFI_INSTANCE_PORT","Panel","Collapse","TextArea","Input","customPanelStyle","background","borderRadius","marginBottom","border","overflow","NifiProcessorDetail","state","formLayout","processor","prevProps","prevState","snapshot","this","match","params","id","method","url","endpoint","cors","then","res","data","status","setState","console","log","formItemLayout","labelCol","span","wrapperCol","processor_show","tip","icon","runningStatus","aggregateSnapshot","runStatus","toLowerCase","color","faPlay","size","faStop","faExclamationTriangle","bulletinsToShow","bulletins","length","map","bulletin","header","category","level","key","style","textAlign","value","message","placeholder","autosize","Aux","count","type","theme","marginTop","bordered","expandIcon","isActive","rotate","padding","minHeight","layout","Item","label","disabled","component","name","allowClear","parentProcessGroup","prefix","executionNode","input","output","to","pathname","Component","NifiConnectionDetail","connection","history","location","connection_show","sourceType","destinationType","source","suffix","destination","queued","processGroupColumns","title","dataIndex","remoteProcessGroupColumns","render","processorColumns","text","record","className","connectionColumns","width","outputPortColumns","inputPortColumns","bulletinsColumns","toUpperCase","bucketColumns","allowBundleRedeploy","allowPublicRead","itemColumns","fixed","nifiProcessGroup","columns","tableColumns","dataSource","Dashboard","flow_status","hardware_status","get","show","paddingTop","gutter","runningCount","valueStyle","stoppedCount","invalidCount","disabledCount","activeThreadCount","faChessBoard","flowFilesQueued","faList","bytesQueued","memory_available","faMemory","total_memory_usage","nifi_memory_usage","showInfo","strokeColor","strokeLinecap","percent","nifi_memory_usage_percent","nifi_cpu_usage","total_cpu_usage","NifiRegistryBucket","buckets","loading","bucketData","bucket","createdTimestamp","identifier","NifiRegistryItem","items","itemData","item","bucketIdentifier","bucketName","modifiedTimestamp","description","versionCount","scroll","x","nifiRemoteProcessGroup","nifiProcessor","nifiConnection","nifiOutputPort","nifiInputPort","customFlowPanelStyle","TabPane","Tabs","NifiFlowDetail","contentList","components","flow","flowInfo","faArrowAltCircleDown","faArrowAltCircleUp","read","faAlignJustify","written","received","faArrowDown","sent","faArrowUp","inputPortCount","outputPortCount","activeRemotePortCount","inactiveRemotePortCount","flowBulletins","timestamp","e","image","Empty","PRESENTED_IMAGE_SIMPLE","processorGroupDataToShow","remoteProcessorGroupDataToShow","processorDataToShow","inputPortDataToShow","outputPortDataToShow","connectionDataToShow","processGroups","transferred","readWrite","NifiProcessGroup","remoteProcessGroups","targetUri","transmitting","transmissionStatus","NifiRemoteProcessGroup","processors","processGroup","tasksDuration","tasks","NifiProcessor","inputPorts","NifiInputPort","outputPorts","NifiOutputPort","connections","sourceName","destinationName","NifiConnection","fontWeight","fontSize","target","faExternalLinkAlt","allFlowToShow","defaultActiveKey","onChange","tab","spin","zIndex","element","faLayerGroup","LEVEL","height","position","backgroundColor","getNewTreeData","treeData","curKey","child","loop","forEach","indexOf","loopLeaf","lev","l","isLeaf","setLeaf","NifiFlowHierarchyView2ResizeBox2","generateTreeNodes","arr","childToAppend","i","push","onSelect","info","fullInfo","isSpinDetail","node","processGroupId","flowDetail","onLoadData","treeNode","isSpin","updatedData","pos","Promise","resolve","setTimeout","eventKey","onLoadDataInitial","checkedKeys","rootFlow","loadingDetail","rcTreeHeight","document","getElementsByClassName","clientHeight","catch","error","finally","treeNodes","margin","checkable","initialHeight","outerHeight","separatorProps","minWidth","initialWidth","loadData","defaultExpandAll","defaultSelectedKeys","defaultExpandedKeys","defaultExpandParent","outerWidth","React","UploadTemplate","confirmDirty","autoCompleteResult","nifiRootFlowId","fileList","uploading","handleUpload","formData","FormData","file","append","post","success","err","multiple","onRemove","index","newFileList","slice","splice","beforeUpload","onClick","WrappedUploadTemplateForm","Form","NifiFlowDetailSearch","selector","sortable","SearchProcessor","handleSearchName","nameParam","a","inputSearchName","page","paginationTotalRows","inputSearchLevel","perPage","flowId","uri","processGroupFlow","total_record","handleExpandRow","handlePageChange","response","handlePerRowsChange","enterLoading","loadingButton","buttonText","iconLoading","allLevel","inputLabelRef","undefined","levels","MenuItem","classes","paddingLeft","defaultSortField","selectableRows","selectableRowsHighlight","expandableRows","expandOnRowClicked","expandableRowsComponent","progressPending","progressComponent","pagination","paginationPerPage","paginationServer","onChangeRowsPerPage","onChangePage","paginationResetDefaultPage","paginationDefaultPage","highlightOnHover","striped","pointerOnHover","noTableHead","persistTableHead","noHeader","subHeader","subHeaderComponent","display","alignItems","FormControl","formControl","InputLabel","htmlFor","Select","event","handleChangeLevel","TextField","textField","variant","subHeaderAlign","fixedHeader","fixedHeaderScrollHeight","withStyles","rootButton","spacing","root","flexWrap","unit","selectEmpty","formControl1","marginRight","Header","Layout","Content","Footer","Sider","SubMenu","Menu","MainLayout","collapsed","onCollapse","collapsible","src","logo","alt","mode","borderTop","faTachometerAlt","faThList","faUpload","faGitAlt","faCubes","faCube","lineHeight","borderBottom","path","exact","App","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee02ec46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const aux = (props) => props.children;\n\n// Wrapper\nexport default aux;\n","import axios from 'axios';\n\n/*\n*\n* Define base URL\n* */\nconst axios_spring_boot_api_instance = axios.create({\n    // baseURL: 'http://210.115.182.181:9990/api/v1',\n    // baseURL: 'http://localhost:9990/api/v1',\n    baseURL: window._env_.API_URL + window._env_.API_PORT + '/api/v1',\n    // baseURL: 'http://133.186.162.192:18001/api/v1',\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': '*',\n        // 'Content-Type': 'application/json',\n    },\n\n    withCredentials: true\n});\n\nexport default axios_spring_boot_api_instance;\n","/*\n*\n* Define endpoints to be used all entire application.\n* */\n\nexport const FLOW_STATUS = '/flow/status';\nexport const FLOW_ROOT = '/flow/root';\nexport const FLOW_ALL = '/flow';\nexport const FLOW_BY_ID = '/flow/';\n\nexport const CONNECTION = '/connections';\n\nexport const PROCESSOR = '/processors';\n\nexport const PROCESS_GROUP = '/process-groups';\n\nexport const SEARCH = '/search';\n\nexport const ALL_LEVEL = '/search/all-level';\n\n// all about nifi-registry\nexport const GET_ALL_BUCKETS = '/buckets';\nexport const GET_ALL_ITEMS = '/items';\n\nexport const GET_HARDWARE_STATUS = '/hardware/status';\n\nexport const LINK_TO_NIFI_INSTANCE = window._env_.NIFI_INSTANCE_URL + window._env_.NIFI_INSTANCE_PORT + '/nifi/?processGroupId=';\n","import React, {Component} from 'react';\n\nimport axios from '../../../axios-spring-boot-api-instance';\nimport Aux from \"../../../hoc/Aux/Aux\";\nimport {Badge, Button, Col, Collapse, Divider, Form, Icon, Input, Row, Spin, Tag} from \"antd\";\nimport * as endpoint from \"../../../Endpoints\";\nimport {NavLink} from \"react-router-dom\";\nimport {faExclamationTriangle, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nconst {Panel} = Collapse;\nconst {TextArea} = Input;\n\nconst customPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    marginBottom: 5,\n    border: 0,\n    overflow: 'hidden',\n};\n\n/*Get Processor Component in Detail*/\nclass NifiProcessorDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formLayout: 'horizontal',\n            processor: {},\n        };\n    }\n\n    componentDidMount(prevProps, prevState, snapshot) {\n\n        if (this.props.match.params.id) {\n            axios({\n                method: 'get',\n                url: endpoint.PROCESSOR + '/' + this.props.match.params.id,\n                cors: true,\n                withCredentials: true\n            })\n                .then(res => {\n                    if (res.data.status)\n                        this.setState({processor: res.data.data});\n\n                    console.log(this.state.processor)\n                });\n        }\n    }\n\n    render() {\n        const {formLayout} = this.state;\n        const formItemLayout =\n            formLayout === 'horizontal'\n                ? {\n                    labelCol: {span: 6},\n                    wrapperCol: {span: 14},\n                }\n                : null;\n\n        let processor_show = <Spin tip=\"Loading...\">Detail processor</Spin>;\n\n        if (this.props.id) {\n            processor_show = <Spin tip=\"Loading...\">Detail processor</Spin>;\n        }\n\n        if (this.state.processor.status) {\n            let icon = null;\n            let runningStatus = this.state.processor.status.aggregateSnapshot.runStatus;\n            if (runningStatus.toLowerCase() === 'running')\n                icon = <FontAwesomeIcon color='rgb(125, 199, 160)' icon={faPlay} size=\"sm\"/>;\n            else if (runningStatus.toLowerCase() === 'stopped')\n                icon = <FontAwesomeIcon color='rgb(209, 134, 134)' icon={faStop} size=\"sm\"/>;\n            else\n                icon = <FontAwesomeIcon color='#cf9f5d' icon={faExclamationTriangle} size=\"xs\"/>;\n\n            let bulletinsToShow = null;\n            if (this.state.processor.bulletins.length) {\n\n                const bulletins = this.state.processor.bulletins.map(bulletin => {\n                    return (\n                        <Panel header={bulletin.bulletin.category + ' - ' + bulletin.bulletin.level} key={bulletin.id}\n                               style={customPanelStyle}>\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <TextArea value={bulletin.bulletin.message} placeholder=\"Bulletin log message\"\n                                              autosize/>\n                                </Col>\n                            </Row>\n                        </Panel>\n                    );\n                });\n\n                bulletinsToShow = (\n                    <Aux>\n                        <Divider/>\n\n                        <Badge count={this.state.processor.bulletins.length}>\n                            <Tag color='red'><Icon type=\"file-exclamation\" theme=\"filled\"/> Bulletin</Tag>\n                        </Badge>\n\n                        <Collapse\n                            style={{marginTop: '15px'}}\n                            bordered={false}\n                            // defaultActiveKey={['1']}\n                            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}\n                        >\n                            {bulletins}\n\n                        </Collapse>\n                    </Aux>\n\n                );\n            }\n\n            processor_show = (\n                <Aux>\n                    <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                        <Form layout={formLayout}>\n\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Processor Name\" {...formItemLayout}>\n                                        <Input disabled={false} value={this.state.processor.component.name}\n                                               placeholder=\"Processor Name\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Parent Process Group\" {...formItemLayout}>\n                                        <Input placeholder=\"Parent Process Group\" allowClear={false}\n                                               value={this.state.processor.parentProcessGroup.component.name}/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Run Status\" {...formItemLayout}>\n                                        <Input disabled={false} value={runningStatus}\n                                               placeholder=\"Run Status\"\n                                               prefix={icon}\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Execute on node\" {...formItemLayout}>\n                                        <Input disabled={false}\n                                               value={this.state.processor.status.aggregateSnapshot.executionNode}\n                                               placeholder=\"Execute on node\"\n                                        />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Input / Size\" {...formItemLayout}>\n                                        <Input disabled={false}\n                                               value={this.state.processor.status.aggregateSnapshot.input}\n                                               placeholder=\"Input\"\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Output / Size\" {...formItemLayout}>\n                                        <Input disabled={false}\n                                               value={this.state.processor.status.aggregateSnapshot.output}\n                                               placeholder=\"Output\"\n                                        />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            {/*<Row>*/}\n                            {/*    <Col span={12} style={{textAlign: 'right'}}>*/}\n                            {/*        <Form.Item label=\"Flow Files Queued\" {...formItemLayout}>*/}\n                            {/*            <Input disabled={false} defaultValue={this.state.processor.status.aggregateSnapshot.queued}*/}\n                            {/*                   placeholder=\"Queued\"/>*/}\n                            {/*        </Form.Item>*/}\n                            {/*    </Col>*/}\n                            {/*    <Col span={12} style={{textAlign: 'right'}}>*/}\n                            {/*        <Form.Item label=\"Flow Files Input\" {...formItemLayout}>*/}\n                            {/*            <Input disabled={false} value={this.state.processor.status.aggregateSnapshot.input}*/}\n                            {/*                   placeholder=\"Destination Name\"*/}\n                            {/*            />*/}\n\n                            {/*        </Form.Item>*/}\n                            {/*    </Col>*/}\n                            {/*</Row>*/}\n\n\n                            {bulletinsToShow}\n\n\n                            <Divider/>\n\n                            <NavLink to={{pathname: \"/components\"}}>\n                                <Button type=\"danger\"><Icon type=\"caret-left\" theme=\"filled\"/> Back</Button>\n                            </NavLink>\n\n                        </Form>\n                    </div>\n                </Aux>);\n        }\n        return processor_show;\n    }\n}\n\nexport default NifiProcessorDetail;\n","import React, {Component} from 'react';\n\nimport axios from '../../../axios-spring-boot-api-instance';\nimport Aux from \"../../../hoc/Aux/Aux\";\nimport {Button, Col, Divider, Form, Icon, Input, Row, Spin} from \"antd\";\nimport * as endpoint from \"../../../Endpoints\";\nimport {NavLink} from \"react-router-dom\";\n\n\n/*Get Connection Component in Detail*/\nclass NifiConnectionDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formLayout: 'horizontal',\n            connection: {},\n        };\n    }\n\n    componentDidMount(prevProps, prevState, snapshot) {\n        console.log(this.props.history.location.pathname);\n        console.log(this.props);\n\n        if (this.props.match.params.id) {\n            axios({\n                method: 'get',\n                url: endpoint.CONNECTION + '/' + this.props.match.params.id,\n                cors: true,\n                withCredentials: true\n            })\n                .then(res => {\n                    if (res.data.status)\n                        this.setState({connection: res.data.data});\n                });\n        }\n    }\n\n    render() {\n        const {formLayout} = this.state;\n        const formItemLayout =\n            formLayout === 'horizontal'\n                ? {\n                    labelCol: {span: 6},\n                    wrapperCol: {span: 14},\n                }\n                : null;\n\n        let connection_show = <Spin tip=\"Loading...\">Detail connection</Spin>;\n\n        if (this.props.id) {\n            connection_show = <Spin tip=\"Loading...\">Detail connection</Spin>;\n        }\n\n        if (this.state.connection.status) {\n            console.log(this.state.connection);\n\n            connection_show = (\n                <Aux>\n                    <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                        <Form layout={formLayout}>\n\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Connection Name\" {...formItemLayout}>\n                                        <Input disabled={false} value={this.state.connection.status.name}\n                                               placeholder=\"Connection Name\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Parent Process Group\" {...formItemLayout}>\n                                        <Input placeholder=\"Parent Process Group\" allowClear={false}\n                                               value={this.state.connection.parentProcessGroup.component.name}/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Source Type\" {...formItemLayout}>\n                                        <Input disabled={false} value={this.state.connection.sourceType}\n                                               placeholder=\"Source Type\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Destination Type\" {...formItemLayout}>\n                                        <Input disabled={false} value={this.state.connection.destinationType}\n                                               placeholder=\"Destination Type\"/>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Source Name\" {...formItemLayout}>\n                                        <Input disabled={false} value={this.state.connection.component.source.name}\n                                               placeholder=\"Source Name\"\n                                               suffix={\n                                                   <Button type=\"primary\" size=\"small\"><Icon type=\"eye\"\n                                                                                             theme=\"filled\"/></Button>\n                                               }\n                                        />\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Destination Name\" {...formItemLayout}>\n                                        <Input disabled={false} value={this.state.connection.component.destination.name}\n                                               placeholder=\"Destination Name\"\n                                               suffix={\n                                                   <Button type=\"primary\" size=\"small\"><Icon type=\"eye\"\n                                                                                             theme=\"filled\"/></Button>\n                                               }\n                                        />\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Flow Files Queued\" {...formItemLayout}>\n                                        <Input disabled={false}\n                                               value={this.state.connection.status.aggregateSnapshot.queued}\n                                               placeholder=\"Queued\"/>\n                                    </Form.Item>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'right'}}>\n                                    <Form.Item label=\"Flow Files Input\" {...formItemLayout}>\n                                        <Input disabled={false}\n                                               value={this.state.connection.status.aggregateSnapshot.input}\n                                               placeholder=\"Destination Name\"\n                                        />\n\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                            <Divider/>\n\n                            <NavLink to={{pathname: \"/components\"}}>\n                                <Button type=\"danger\"><Icon type=\"caret-left\" theme=\"filled\"/> Back</Button>\n                            </NavLink>\n\n                        </Form>\n                    </div>\n                </Aux>);\n        }\n        return connection_show;\n    }\n}\n\nexport default NifiConnectionDetail;\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {Icon, Tag} from \"antd\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faExclamationTriangle, faPlay, faStop} from '@fortawesome/free-solid-svg-icons'\n\n\n/*\n*\n* Define all tables skeleton for each Nifi component\n* */\n\nexport const componentColumns = [\n    {\n        title: '#ID',\n        dataIndex: 'id',\n        key: 'id',\n    },\n    {\n        title: 'Component Name',\n        dataIndex: 'componentName',\n        key: 'componentName',\n        render: componentName => {\n            let color = 'green';\n            return (\n                <span>\n                            <Tag color={color} key={componentName}>\n                                {componentName.toUpperCase()}\n                            </Tag>\n                        </span>\n            )\n        }\n    },\n    {\n        title: 'Component ID',\n        dataIndex: 'componentId',\n        key: 'componentId',\n    },\n    {\n        title: 'Component Type',\n        dataIndex: 'componentType',\n        key: 'componentType',\n        render: componentType => {\n            // let color = '#2db7f5';\n            let color = 'blue';\n            return (\n                <span>\n                            <Tag color={color} key={componentType}>\n                                {componentType.toUpperCase()}\n                            </Tag>\n                        </span>\n            )\n        }\n    },\n    {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n            console.log(record);\n            let mainEndpoint = '';\n\n            if (record.componentType === 'Processor')\n                mainEndpoint = 'processors';\n            else if (record.componentType === 'ProcessGroup')\n                mainEndpoint = 'process-groups';\n            else if (record.componentType === 'Connection')\n                mainEndpoint = 'connections';\n\n            return (\n                <span>\n                            <NavLink to={{\n                                pathname: '/component-detail/' + mainEndpoint + '/' + record.componentId,\n                                // hash: '#submit',\n                                // search: '?id=' + record.componentId\n                            }}><Icon className=\"primary\" type=\"eye\" theme=\"filled\"/></NavLink>\n                        </span>\n            );\n        }\n    },\n];\n\nexport const processGroupColumns = [\n    {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        title: 'Transferred',\n        dataIndex: 'transferred',\n        key: 'transferred'\n    },\n    {\n        title: 'Read / Write',\n        dataIndex: 'readWrite',\n        key: 'readWrite',\n    },\n    {\n        title: 'Input / Size',\n        dataIndex: 'input',\n        key: 'input',\n    },\n    {\n        title: 'Output / Size',\n        dataIndex: 'output',\n        key: 'output',\n    },\n    {\n        title: 'Sent / Size',\n        dataIndex: 'sent',\n        key: 'sent',\n    },\n    {\n        title: 'Received / Size',\n        dataIndex: 'received',\n        key: 'received',\n    },\n];\n\nexport const remoteProcessGroupColumns = [\n    {\n        // width: '40%',\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        // width: '30%',\n        title: 'Target URI',\n        dataIndex: 'targetUri',\n        key: 'targetUri'\n    },\n    {\n        // width: '30%',\n        title: 'Transmitting',\n        dataIndex: 'transmitting',\n        key: 'transmitting',\n        render: runStatus => {\n            let icon = null;\n            if (runStatus.toLowerCase() === 'transmitting')\n                icon = <FontAwesomeIcon color='rgb(209, 134, 134)' icon={faStop} size=\"sm\"/>;\n            else\n                icon = <FontAwesomeIcon color='#cf9f5d' icon={faExclamationTriangle} size=\"sm\"/>;\n            return (\n                <span>\n                    {icon} {runStatus}\n                </span>\n            )\n        }\n    },\n    {\n        // width: '30%',\n        title: 'Sent / Size',\n        dataIndex: 'sent',\n        key: 'sent',\n    },\n    {\n        // width: '30%',\n        title: 'Received / Size',\n        dataIndex: 'received',\n        key: 'received',\n    },\n];\n\nexport const processorColumns = [\n    {\n        // width: '40%',\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        // width: '30%',\n        title: 'Type',\n        dataIndex: 'type',\n        key: 'type'\n    },\n    {\n        // width: '30%',\n        title: 'Process Group',\n        dataIndex: 'processGroup',\n        key: 'processGroup',\n    },\n    {\n        // width: '30%',\n        title: 'Run Status',\n        dataIndex: 'runStatus',\n        key: 'runStatus',\n        render: runStatus => {\n            let icon = null;\n            if (runStatus === 'Stopped')\n                icon = <FontAwesomeIcon color='rgb(209, 134, 134)' icon={faStop} size=\"sm\"/>;\n            else if (runStatus === 'Running')\n                icon = <FontAwesomeIcon color='rgb(125, 199, 160)' icon={faPlay} size=\"sm\"/>;\n            else\n                icon = <FontAwesomeIcon color='#cf9f5d' icon={faExclamationTriangle} size=\"sm\"/>;\n            return (\n                <span>\n                    {icon} {runStatus}\n                </span>\n            )\n        }\n    },\n    {\n        // width: '30%',\n        title: 'Input',\n        dataIndex: 'input',\n        key: 'input',\n    },\n    {\n        // width: '30%',\n        title: 'Output',\n        dataIndex: 'output',\n        key: 'output',\n    },\n    {\n        // width: '30%',\n        title: 'Read / Write',\n        dataIndex: 'readWrite',\n        key: 'readWrite',\n    },\n    {\n        // width: '30%',\n        title: 'Tasks / Time',\n        dataIndex: 'tasksDuration',\n        key: 'tasksDuration',\n    },\n    {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n            console.log(record);\n            return (\n                <span>\n                    <NavLink to={{\n                        pathname: '/component-detail/processors/' + record.key,\n                        // hash: '#submit',\n                        // search: '?id=' + record.componentId\n                    }}><Icon className=\"primary\" type=\"eye\" theme=\"filled\"/></NavLink>\n                </span>\n            );\n        }\n    },\n];\n\nexport const connectionColumns = [\n    {\n        width: '21%',\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        width: '20%',\n        title: 'Source Name',\n        dataIndex: 'sourceName',\n        key: 'sourceName',\n    },\n    {\n        width: '20%',\n        title: 'Destination Name',\n        dataIndex: 'destinationName',\n        key: 'destinationName',\n    },\n    {\n        width: '13%',\n        title: 'In/Size 5min',\n        dataIndex: 'input',\n        key: 'input',\n    },\n    {\n        width: '13%',\n        title: 'Out/Size 5min',\n        dataIndex: 'output',\n        key: 'output',\n    },\n    {\n        width: '13%',\n        title: 'Queue/Size',\n        dataIndex: 'queued',\n        key: 'queued',\n    },\n    {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n            console.log(record);\n            return (\n                <span>\n                    <NavLink to={{\n                        pathname: '/component-detail/connections/' + record.key,\n                        // hash: '#submit',\n                        // search: '?id=' + record.componentId\n                    }}><Icon className=\"primary\" type=\"eye\" theme=\"filled\"/></NavLink>\n                </span>\n            );\n        }\n    },\n];\n\nexport const outputPortColumns = [\n    {\n        width: '40%',\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        width: '30%',\n        title: 'Run Status',\n        dataIndex: 'runStatus',\n        key: 'runStatus',\n        render: runStatus => {\n            let icon = null;\n            if (runStatus === 'Stopped')\n                icon = <FontAwesomeIcon color='rgb(209, 134, 134)' icon={faStop} size=\"sm\"/>;\n            else if (runStatus === 'Running')\n                icon = <FontAwesomeIcon color='rgb(125, 199, 160)' icon={faPlay} size=\"sm\"/>;\n            else\n                icon = <FontAwesomeIcon color='#cf9f5d' icon={faExclamationTriangle} size=\"sm\"/>;\n            return (\n                <span>\n                    {icon} {runStatus}\n                </span>\n            )\n        }\n    },\n    {\n        width: '30%',\n        title: 'Out / Size 5 min',\n        dataIndex: 'output',\n        key: 'output',\n    },\n];\n\nexport const inputPortColumns = [\n    {\n        width: '40%',\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        width: '30%',\n        title: 'Run Status',\n        dataIndex: 'runStatus',\n        key: 'runStatus',\n        render: runStatus => {\n            let icon = null;\n            if (runStatus === 'Stopped')\n                icon = <FontAwesomeIcon color='rgb(209, 134, 134)' icon={faStop} size=\"sm\"/>;\n            else if (runStatus === 'Running')\n                icon = <FontAwesomeIcon color='rgb(125, 199, 160)' icon={faPlay} size=\"sm\"/>;\n            else\n                icon = <FontAwesomeIcon color='#cf9f5d' icon={faExclamationTriangle} size=\"sm\"/>;\n            return (\n                <span>\n                    {icon} {runStatus}\n                </span>\n            )\n        }\n    },\n    {\n        width: '30%',\n        title: 'In / Size 5 min',\n        dataIndex: 'input',\n        key: 'input',\n    },\n];\n\nexport const bulletinsColumns = [\n    {\n        width: '15%',\n        title: 'Timestamp',\n        dataIndex: 'timestamp',\n        key: 'timestamp',\n    },\n    {\n        width: '20%',\n        title: 'Category',\n        dataIndex: 'category',\n        key: 'category',\n\n    },\n    {\n        width: '10%',\n        title: 'Level',\n        dataIndex: 'level',\n        key: 'level',\n        render: level => {\n            let icon = null;\n            if (level === 'warning'.toUpperCase())\n                icon = '#cf9f5d';\n            else if (level === 'error'.toUpperCase())\n                icon = 'rgb(209, 134, 134)';\n            else\n                icon = 'rgb(125, 199, 160)';\n            return (\n                <span style={{color: icon}}>\n                   {level}\n                </span>\n            )\n        }\n    },\n    {\n        width: '55%',\n        title: 'Message',\n        dataIndex: 'message',\n        key: 'message',\n    },\n];\n\nexport const bucketColumns = [\n    {\n        width: '28%',\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        width: '27%',\n        title: 'Identifier',\n        dataIndex: 'identifier',\n        key: 'identifier',\n    },\n    {\n        width: '10%',\n        title: 'Created Time',\n        dataIndex: 'createdTimestamp',\n        key: 'createdTimestamp',\n    },\n    {\n        width: '14%',\n        title: 'Allow Bundle Redeploy',\n        dataIndex: 'allowBundleRedeploy',\n        key: 'allowBundleRedeploy',\n        render: (text, record) => {\n\n            if (record.allowBundleRedeploy === true)\n                return   <Tag color=\"#87d068\">TRUE</Tag>;\n            else\n                return  <Tag color=\"#f50\">FALSE</Tag>;\n        }\n    },\n    {\n        width: '12%',\n        title: 'Allow Public Read',\n        dataIndex: 'allowPublicRead',\n        key: 'allowPublicRead',\n        render: (text, record) => {\n            if (record.allowPublicRead === true)\n                return   <Tag color=\"#87d068\">TRUE</Tag>;\n            else\n                return  <Tag color=\"#f50\">FALSE</Tag>;\n        }\n    },\n    {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n            console.log(record);\n            return (\n                <span>\n                    <NavLink to={{\n                        pathname: '/component-detail/connections/' + record.key,\n                        // hash: '#submit',\n                        // search: '?id=' + record.componentId\n                    }}><Icon className=\"primary\" type=\"eye\" theme=\"filled\"/></NavLink>\n                </span>\n            );\n        }\n    },\n];\n\nexport const itemColumns = [\n    {\n        fixed: 'left',\n        width: 400,\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    /*{\n        width: '21%',\n        title: 'ID',\n        dataIndex: 'identifier',\n        key: 'identifier',\n    },*/\n    {\n        width: '8%',\n        title: 'Type',\n        dataIndex: 'type',\n        key: 'type',\n    },\n    {\n        width: '7%',\n        title: 'Version Count',\n        dataIndex: 'versionCount',\n        key: 'versionCount',\n    },\n    {\n        width: '25%',\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description',\n    },\n    {\n        width: '10%',\n        title: 'Created Times',\n        dataIndex: 'createdTimestamp',\n        key: 'createdTimestamp',\n    },\n    {\n        width: '10%',\n        title: 'Modified Times',\n        dataIndex: 'modifiedTimestamp',\n        key: 'modifiedTimestamp',\n    },\n    {\n        width: '15%',\n        title: 'Bucket Name',\n        dataIndex: 'bucketName',\n        key: 'bucketName',\n    },\n    /*{\n        width: '21%',\n        title: 'Bucket Id',\n        dataIndex: 'bucketIdentifier',\n        key: 'bucketIdentifier',\n    },*/\n    {\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => {\n            console.log(record);\n            return (\n                <span>\n                    <NavLink to={{\n                        pathname: '/component-detail/connections/' + record.key,\n                        // hash: '#submit',\n                        // search: '?id=' + record.componentId\n                    }}><Icon className=\"primary\" type=\"eye\" theme=\"filled\"/></NavLink>\n                </span>\n            );\n        }\n    },\n];\n","import React from 'react';\nimport * as tableColumns from \"../../TableColumns\";\nimport {Collapse, Icon, Table} from \"antd\";\n\nconst {Panel} = Collapse;\nconst customPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    overflow: 'hidden',\n};\n\n/*Nifi ProcessGroup component collapse*/\nconst nifiProcessGroup = (props) => {\n    return (\n        <Collapse\n            bordered={false}\n            key=\"processGroup\"\n            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n            <Panel\n                header={\"Process Groups\".toUpperCase() + \" (\" + props.count + \")\"}\n                key={''} style={customPanelStyle}>\n\n                <Table\n                    size='small' columns={tableColumns.processGroupColumns}\n                    dataSource={props.data} bordered={true}/>\n            </Panel>\n        </Collapse>\n    );\n};\n\nexport default nifiProcessGroup;\n","import React, {Component} from 'react';\nimport Aux from '../../hoc/Aux/Aux'\nimport {Card, Col, Progress, Row, Spin, Statistic} from \"antd\";\nimport axios from \"../../axios-spring-boot-api-instance\";\nimport * as endpoint from '../../Endpoints';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faChessBoard, faExclamationTriangle, faList, faMemory, faPlay, faStop} from '@fortawesome/free-solid-svg-icons'\n\nclass Dashboard extends Component {\n\n    state = {\n        flow_status: null,\n        hardware_status: null,\n\n    };\n\n    componentDidMount() {\n        /*Start Get status of Nifi Instance when first load this page*/\n        axios.get(endpoint.FLOW_STATUS)\n            .then(res => {\n                console.log(res);\n                this.setState({flow_status: res.data});\n            });\n\n        /*End get status of Nifi Instance when first load this page*/\n\n        /*Get Hardware status of Nifi Instance when first load this page*/\n        axios.get(endpoint.GET_HARDWARE_STATUS)\n            .then(res => {\n                console.log(res);\n                this.setState({hardware_status: res.data});\n            });\n        /*End Get Hardware status of Nifi Instance when first load this page*/\n    }\n\n    render() {\n        let show = <Spin style={{paddingTop: '50%'}} tip=\"Loading...\"> </Spin>;\n\n        if (this.state.flow_status && this.state.hardware_status) {\n            show = (\n                <Aux>\n                    <div style={{ minHeight: 360}}>\n                        <div style={{background: '#ECECEC', padding: '30px'}}>\n                            <h3>All Flow Information</h3>\n                            <Row gutter={16}>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title=\"RUNNING COMPONENTS\"\n                                            value={this.state.flow_status.data.runningCount}\n                                            valueStyle={{color: 'rgb(125, 199, 160)'}}\n                                            prefix={<FontAwesomeIcon icon={faPlay} size=\"xs\"/>}\n                                            // suffix=\"%\"\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title=\"STOPPED COMPONENTS\"\n                                            value={this.state.flow_status.data.stoppedCount}\n                                            valueStyle={{color: 'rgb(209, 134, 134)'}}\n                                            prefix={<FontAwesomeIcon icon={faStop} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title=\"INVALID COMPONENTS\"\n                                            value={this.state.flow_status.data.invalidCount}\n                                            valueStyle={{color: '#cf9f5d'}}\n                                            prefix={<FontAwesomeIcon icon={faExclamationTriangle} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title=\"DISABLED COMPONENTS\"\n                                            value={this.state.flow_status.data.disabledCount}\n                                            valueStyle={{color: '#cf9f5d'}}\n                                            prefix={<FontAwesomeIcon icon={faExclamationTriangle} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title={\"Active Thread\".toUpperCase()}\n                                            value={this.state.flow_status.data.activeThreadCount}\n                                            valueStyle={{color: '#cf9f5d'}}\n                                            prefix={<FontAwesomeIcon icon={faChessBoard} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title={\"Total Queued Data\".toUpperCase()}\n                                            value={this.state.flow_status.data.flowFilesQueued}\n                                            valueStyle={{color: '#728e9b'}}\n                                            prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title={\"Total Bytes Queued\".toUpperCase()}\n                                            value={this.state.flow_status.data.bytesQueued + \" bytes\"}\n                                            valueStyle={{color: '#728e9b'}}\n                                            prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title={\"Total Queued Data\".toUpperCase()}\n                                            value={this.state.flow_status.data.queued}\n                                            valueStyle={{color: '#728e9b'}}\n                                            prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </div>\n\n                        <div style={{background: '#ECECEC', padding: '0px 30px 30px 30px'}}>\n                            <h3>System Monitoring</h3>\n                            <Row gutter={16}>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title={\"Memory Available\".toUpperCase()}\n                                            value={this.state.hardware_status.memory_available}\n                                            valueStyle={{color: 'rgb(125, 199, 160)'}}\n                                            prefix={<FontAwesomeIcon icon={faMemory} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title={\"Total Memory Usage\".toUpperCase()}\n                                            value={this.state.hardware_status.total_memory_usage}\n                                            valueStyle={{color: 'rgb(209, 134, 134)'}}\n                                            prefix={<FontAwesomeIcon icon={faMemory} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <Statistic\n                                            title={\"Memory Used By Nifi\".toUpperCase()}\n                                            value={this.state.hardware_status.nifi_memory_usage}\n                                            valueStyle={{color: '#cf9f5d'}}\n                                            prefix={<FontAwesomeIcon icon={faMemory} size=\"xs\"/>}\n                                        />\n                                    </Card>\n                                </Col>\n\n                            </Row>\n\n                            <Row gutter={16}>\n                                <Col span={6}>\n                                    <Card>\n                                        <h4>Memory Used By Nifi (%)</h4>\n                                        <div style={{textAlign: \"center\"}}>\n                                            <Progress showInfo={true} strokeColor=\"#cf9f5d\" status=\"active\"\n                                                      type=\"circle\" strokeLinecap=\"square\"\n                                                      percent={this.state.hardware_status.nifi_memory_usage_percent}/>\n                                        </div>\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <h4>CPU used by Nifi (%)</h4>\n                                        <div style={{textAlign: \"center\"}}>\n                                            <Progress showInfo={true} strokeColor=\"rgb(125, 199, 160)\" status=\"active\"\n                                                      type=\"circle\" strokeLinecap=\"square\"\n                                                      percent={this.state.hardware_status.nifi_cpu_usage}/>\n                                        </div>\n                                    </Card>\n                                </Col>\n                                <Col span={6}>\n                                    <Card>\n                                        <h4>Total CPU usage (%)</h4>\n                                        <div style={{textAlign: \"center\"}}>\n                                            <Progress showInfo={true} status=\"active\" type=\"circle\"\n                                                      strokeLinecap=\"square\"\n                                                      percent={this.state.hardware_status.total_cpu_usage}/>\n                                        </div>\n                                    </Card>\n                                </Col>\n\n                            </Row>\n                        </div>\n                    </div>\n\n                </Aux>\n            );\n        }\n        return show;\n    }\n}\n\nexport default Dashboard;\n","import React, {Component} from 'react';\nimport * as tableColumns from \"../../../TableColumns\";\nimport {Spin, Table} from \"antd\";\n\nimport axios from \"../../../axios-spring-boot-api-instance\";\nimport * as endpoint from \"../../../Endpoints\";\n\n\nclass NifiRegistryBucket extends Component {\n\n    state = {\n        buckets: [],\n        loading: true,\n    };\n\n    componentDidMount() {\n        axios.get(endpoint.GET_ALL_BUCKETS)\n            .then(res => {\n                this.setState({buckets: res.data.data});\n                console.log(res.data.data);\n                this.setState({loading: false})\n            });\n    }\n\n    render() {\n\n        let show = <Spin style={{paddingTop: '50%'}} tip=\"Loading...\"> </Spin>;\n\n        if (this.state.buckets && this.state.loading === false) {\n            let bucketData = this.state.buckets.map(bucket => {\n                return {\n                    allowBundleRedeploy: bucket.allowBundleRedeploy,\n                    allowPublicRead: bucket.allowPublicRead,\n                    createdTimestamp: bucket.createdTimestamp,\n                    identifier: bucket.identifier,\n                    name: bucket.name\n                }\n\n            });\n\n            show = (\n                <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                    <Table\n                        size='small' columns={tableColumns.bucketColumns}\n                        dataSource={bucketData} bordered={true}/>\n                </div>\n\n            );\n        }\n\n        return show;\n    }\n}\n\nexport default NifiRegistryBucket;\n","import React, {Component} from 'react';\nimport * as tableColumns from \"../../../TableColumns\";\nimport {Spin, Table} from \"antd\";\n\nimport axios from \"../../../axios-spring-boot-api-instance\";\nimport * as endpoint from \"../../../Endpoints\";\n\n\nclass NifiRegistryItem extends Component {\n\n    state = {\n        items: [],\n        loading: true,\n    };\n\n    componentDidMount() {\n        axios.get(endpoint.GET_ALL_ITEMS)\n            .then(res => {\n                this.setState({items: res.data.data});\n                console.log(res.data.data);\n                this.setState({loading: false})\n            });\n    }\n\n    render() {\n\n        let show = <Spin style={{paddingTop: '50%'}} tip=\"Loading...\"> </Spin>;\n\n        if (this.state.items && this.state.loading === false) {\n            let itemData = this.state.items.map(item => {\n                return {\n                    \"bucketIdentifier\": item.bucketIdentifier,\n                    \"bucketName\": item.bucketName,\n                    \"createdTimestamp\": item.createdTimestamp,\n                    \"modifiedTimestamp\": item.modifiedTimestamp,\n                    \"description\": item.description,\n                    \"identifier\": item.identifier,\n                    \"name\": item.name,\n                    \"type\": item.type,\n                    \"versionCount\": item.versionCount,\n                }\n            });\n\n            show = (\n                <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                    <Table\n                        size='small' columns={tableColumns.itemColumns}\n                        dataSource={itemData} bordered={true} scroll={{x: 2000}}/>\n                </div>\n\n            );\n        }\n\n        return show;\n    }\n}\n\nexport default NifiRegistryItem;\n","import React from 'react';\nimport * as tableColumns from \"../../TableColumns\";\nimport {Collapse, Icon, Table} from \"antd\";\n\nconst {Panel} = Collapse;\nconst customPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    overflow: 'hidden',\n};\n\n/*Nifi RemoteProcessGroup component collapse*/\nconst nifiRemoteProcessGroup = (props) => {\n\n    return (\n        <Collapse\n            bordered={false}\n            key=\"remoteProcessGroup\"\n            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n            <Panel\n                header={\"Remote Process Groups\".toUpperCase() + \" (\" + props.count + \")\"}\n                key={''} style={customPanelStyle}>\n\n                <Table\n                    size='small' columns={tableColumns.remoteProcessGroupColumns}\n                    dataSource={props.data} bordered={true}/>\n\n            </Panel>\n        </Collapse>\n    );\n};\n\nexport default nifiRemoteProcessGroup;\n","import React from 'react';\nimport {Collapse, Icon, Table} from \"antd\";\nimport * as tableColumns from \"../../TableColumns\";\n\nconst {Panel} = Collapse;\nconst customPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    overflow: 'hidden',\n};\n\n\n/*Nifi Processor component collapse*/\nconst nifiProcessor = (props) => {\n    return (\n        <Collapse\n            bordered={false}\n            key=\"processor\"\n            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n            <Panel\n                header={\"Processors\".toUpperCase() + \" (\" + props.count + \")\"}\n                key={''} style={customPanelStyle}>\n\n                <Table\n                    size='small' columns={tableColumns.processorColumns}\n                    dataSource={props.data} bordered={true}/>\n            </Panel>\n        </Collapse>\n    );\n\n};\n\nexport default nifiProcessor;\n","import React from 'react';\nimport * as tableColumns from \"../../TableColumns\";\nimport {Collapse, Icon, Table} from \"antd\";\n\nconst {Panel} = Collapse;\nconst customPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    overflow: 'hidden',\n};\n\n/*Nifi Connection component collapse*/\nconst nifiConnection = (props) => {\n\n    return (\n        <Collapse\n            bordered={false}\n            key=\"connection\"\n            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n            <Panel\n                header={\"Connections\".toUpperCase() + \" (\" + props.count + \")\"}\n                key={''} style={customPanelStyle}>\n\n                <Table\n                    size='small' columns={tableColumns.connectionColumns}\n                    dataSource={props.data} bordered={true}/>\n\n            </Panel>\n        </Collapse>\n    );\n\n};\n\nexport default nifiConnection;\n","import React from 'react';\nimport * as tableColumns from \"../../TableColumns\";\nimport {Collapse, Icon, Table} from \"antd\";\n\nconst {Panel} = Collapse;\nconst customPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    overflow: 'hidden',\n};\n\n/*Nifi OutputPort component collapse*/\nconst nifiOutputPort = (props) => {\n\n    return (\n        <Collapse\n            bordered={false}\n            key=\"outputPort\"\n            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n            <Panel\n                header={\"Output Ports\".toUpperCase() + \" (\" + props.count + \")\"}\n                key={''} style={customPanelStyle}>\n\n                <Table\n                    size='small' columns={tableColumns.outputPortColumns}\n                    dataSource={props.data} bordered={true}/>\n\n            </Panel>\n        </Collapse>\n    );\n\n};\n\nexport default nifiOutputPort;\n","import React from 'react';\nimport * as tableColumns from \"../../TableColumns\";\nimport {Collapse, Icon, Table} from \"antd\";\n\nconst {Panel} = Collapse;\nconst customPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    overflow: 'hidden',\n};\n/*Nifi InputPort component collapse*/\nconst nifiInputPort = (props) => {\n\n    return (\n        <Collapse\n            bordered={false}\n            key=\"inputPort\"\n            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n            <Panel\n                header={\"Input Ports\".toUpperCase() + \" (\" + props.count + \")\"}\n                key={''} style={customPanelStyle}>\n\n                <Table\n                    size='small' columns={tableColumns.inputPortColumns}\n                    dataSource={props.data} bordered={true}/>\n\n            </Panel>\n        </Collapse>\n    );\n\n};\n\nexport default nifiInputPort;\n","import React from 'react';\nimport {Badge, Button, Card, Col, Collapse, Empty, Icon, Row, Spin, Statistic, Table, Tabs} from 'antd';\nimport Aux from '../../../hoc/Aux/Aux';\nimport NifiProcessGroup from '../../NifiProcessGroup/NifiProcessGroup';\nimport NifiRemoteProcessGroup from '../../NifiRemoteProcessGroup/NifiRemoteProcessGroup';\nimport NifiProcessor from '../../NifiProcessor/NifiProcessor';\nimport NifiConnection from '../../NifiConnection/NifiConnection';\nimport NifiOutputPort from '../../NifiOutputPort/NifiOutputPort';\nimport NifiInputPort from '../../NifiInputPort/NifiInputPort';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport * as tableColumns from \"../../../TableColumns\";\n\nimport {\n    faAlignJustify,\n    faArrowAltCircleDown,\n    faArrowAltCircleUp,\n    faArrowDown,\n    faArrowUp,\n    faChessBoard,\n    faExclamationTriangle,\n    faExternalLinkAlt,\n    faList,\n    faPlay,\n    faStop\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {Link} from \"react-router-dom\";\nimport * as endpoint from \"../../../Endpoints\";\n\nconst {Panel} = Collapse;\nconst customFlowPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    marginBottom: '15px',\n    overflow: 'hidden',\n};\nconst {TabPane} = Tabs;\n\nconst NifiFlowDetail = (props) => {\n\n    function callback(key) {\n        console.log(key);\n    }\n\n    // let show = <Spin tip=\"Loading...\"> </Spin>;\n    let show = 'Click on process group to show the detail here.';\n    // let show = null;\n\n    let contentList = {\n        status: null,\n        components: null,\n        bulletins: null,\n    };\n\n    contentList.status = (\n        <Row gutter={16}>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Active Threads\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.activeThreadCount}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faChessBoard} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Queued\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.queued}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Input\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.input}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleDown} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Output\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.output}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleUp} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Read\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.read}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faAlignJustify} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Written\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.written}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faAlignJustify} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Received\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.received}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faArrowDown} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Sent\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.status.aggregateSnapshot.sent}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faArrowUp} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n\n        </Row>\n    );\n    contentList.components = (\n        <Row gutter={16}>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"RUNNING COMPONENTS\"\n                        value={props.flow.flow.flowInfo.component.runningCount}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faPlay} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"STOPPED COMPONENTS\"\n                        value={props.flow.flow.flowInfo.component.stoppedCount}\n                        valueStyle={{color: 'rgb(209, 134, 134)'}}\n                        prefix={<FontAwesomeIcon icon={faStop} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"INVALID COMPONENTS\"\n                        value={props.flow.flow.flowInfo.component.invalidCount}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faExclamationTriangle} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"DISABLED COMPONENTS\"\n                        value={props.flow.flow.flowInfo.component.disabledCount}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faExclamationTriangle} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Input port count\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.component.inputPortCount}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleDown} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Output Port Count\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.component.outputPortCount}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleUp} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Active Remote Port Count\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.component.activeRemotePortCount}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Inactive Remote Port Count\".toUpperCase()}\n                        value={props.flow.flow.flowInfo.component.inactiveRemotePortCount}\n                        valueStyle={{color: 'rgb(209, 134, 134)'}}\n                        prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n        </Row>\n    );\n\n    let flowBulletins = [];\n    if (props.flow.flow.flowInfo.bulletins.length) {\n        try {\n            flowBulletins = props.flow.flow.flowInfo.bulletins.map(bulletin => {\n                return {\n                    key: bulletin.bulletin.id,\n                    timestamp: bulletin.bulletin.timestamp,\n                    level: bulletin.bulletin.level,\n                    category: bulletin.bulletin.category,\n                    message: bulletin.bulletin.message,\n                };\n            });\n            console.log(flowBulletins);\n            contentList.bulletins = (\n                <Table\n                    size='small' columns={tableColumns.bulletinsColumns}\n                    dataSource={flowBulletins} bordered={true}/>\n            );\n        } catch (e) {\n            console.log('Meme error');\n            contentList.bulletins = (\n                <Card>\n                    <Empty\n                        description={'Components with bulletins(errors) may be deleted on NiFi! And the error indicator will be disappear within 5 minutes.'}\n                        image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n                </Card>\n\n            );\n        }\n\n    } else {\n        contentList.bulletins = (\n            <Card>\n                <Empty description={'5분 내 나타난 에러 로그 기록이 없습니다!'} image={Empty.PRESENTED_IMAGE_SIMPLE}\n                       style={{color: 'rgba(125, 199, 160, 1)'}}/>\n            </Card>\n        );\n    }\n\n    let processorGroupDataToShow = [];\n    let remoteProcessorGroupDataToShow = [];\n    let processorDataToShow = [];\n    let inputPortDataToShow = [];\n    let outputPortDataToShow = [];\n    let connectionDataToShow = [];\n\n    if (props.flow.flow.processGroups.length) {\n        const data = props.flow.flow.processGroups.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                transferred: component.status.aggregateSnapshot.transferred,\n                readWrite: component.status.aggregateSnapshot.read + ' / ' + component.status.aggregateSnapshot.written,\n                input: component.status.aggregateSnapshot.input,\n                output: component.status.aggregateSnapshot.output,\n                sent: component.status.aggregateSnapshot.sent,\n                received: component.status.aggregateSnapshot.received,\n            };\n        });\n\n        processorGroupDataToShow = (\n            <NifiProcessGroup data={data} count={props.flow.flow.processGroups.length}/>\n        );\n    }\n\n    if (props.flow.flow.remoteProcessGroups.length) {\n        const data = props.flow.flow.remoteProcessGroups.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                targetUri: component.status.targetUri,\n                transmitting: component.status.transmissionStatus,\n                sent: component.status.aggregateSnapshot.sent,\n                received: component.status.aggregateSnapshot.received,\n            };\n        });\n\n        remoteProcessorGroupDataToShow = (\n            <NifiRemoteProcessGroup data={data} count={props.flow.flow.remoteProcessGroups.length}/>\n        );\n    }\n\n    if (props.flow.flow.processors.length) {\n        const data = props.flow.flow.processors.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                type: component.status.aggregateSnapshot.type,\n                processGroup: props.flow.flow.flowInfo.status.name,\n                runStatus: component.status.aggregateSnapshot.runStatus,\n                input: component.status.aggregateSnapshot.input,\n                output: component.status.aggregateSnapshot.output,\n                readWrite: component.status.aggregateSnapshot.read + ' / ' + component.status.aggregateSnapshot.written,\n                tasksDuration: component.status.aggregateSnapshot.tasks + ' / ' + component.status.aggregateSnapshot.tasksDuration,\n            };\n        });\n\n        processorDataToShow = (\n            <NifiProcessor data={data} count={props.flow.flow.processors.length}/>\n        );\n    }\n\n    if (props.flow.flow.inputPorts.length) {\n        const data = props.flow.flow.inputPorts.map(component => {\n            return {\n                key: component.id,\n                name: component.status.aggregateSnapshot.name,\n                runStatus: component.status.aggregateSnapshot.runStatus,\n                input: component.status.aggregateSnapshot.input,\n            };\n        });\n\n        inputPortDataToShow = (\n            <NifiInputPort count={props.flow.flow.inputPorts.length} data={data}/>\n        );\n    }\n\n    if (props.flow.flow.outputPorts.length) {\n        const data = props.flow.flow.outputPorts.map(component => {\n            return {\n                key: component.id,\n                name: component.status.aggregateSnapshot.name,\n                runStatus: component.status.aggregateSnapshot.runStatus,\n                output: component.status.aggregateSnapshot.output,\n            };\n        });\n\n        outputPortDataToShow = (\n            <NifiOutputPort data={data} count={props.flow.flow.outputPorts.length}/>\n        );\n    }\n\n    if (props.flow.flow.connections.length) {\n        const data = props.flow.flow.connections.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                sourceName: component.component.source.name,\n                destinationName: component.component.destination.name,\n                input: component.status.aggregateSnapshot.input,\n                output: component.status.aggregateSnapshot.output,\n                queued: component.status.aggregateSnapshot.queued,\n            };\n        });\n        connectionDataToShow = (\n            <NifiConnection data={data} count={props.flow.flow.connections.length}/>\n        );\n    }\n\n    const header = (\n        <div>\n            <span style={{fontWeight: 'bold', fontSize: '20px', color: 'rgb(24, 144, 255)'}}>\n                {props.flow.flow.flowInfo.status.name}\n            </span>\n            &nbsp;&nbsp;&nbsp;\n            <Link\n                target=\"_blank\"\n                to={{pathname: endpoint.LINK_TO_NIFI_INSTANCE + props.flow.id + \"&componentIds=\"}}>\n                <Button key=\"3\"\n                        type=\"danger\"\n                        size=\"small\"><FontAwesomeIcon icon={faExternalLinkAlt} size=\"xs\"/></Button>\n            </Link>\n        </div>);\n\n\n    const allFlowToShow = (\n        <Panel\n            // header={props.flow.flow.flowInfo.status.name}\n            header={header}\n            key={1} style={customFlowPanelStyle}>\n\n            <div>\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Status\" key=\"1\">\n                        {contentList.status}\n                    </TabPane>\n                    <TabPane tab=\"Components\" key=\"2\">\n                        {contentList.components}\n                    </TabPane>\n                    <TabPane tab={<Badge\n                        count={props.flow.flow.flowInfo.bulletins.length}><span>Bulletins&nbsp;&nbsp;&nbsp;</span></Badge>}\n                             key=\"3\">\n                        {contentList.bulletins}\n                    </TabPane>\n                </Tabs>\n            </div>\n\n            {processorGroupDataToShow}\n\n            {remoteProcessorGroupDataToShow}\n\n            {processorDataToShow}\n\n            {inputPortDataToShow}\n\n            {outputPortDataToShow}\n\n            {connectionDataToShow}\n\n        </Panel>\n    );\n\n    if (props.spin)\n        return (\n            <div style={{\n                zIndex: 99999, paddingTop: \"50px\"\n            }}><Spin style={{paddingTop: '0px', zIndex: 2}} tip={\"Loading...\"}> </Spin></div>\n        );\n\n    if (allFlowToShow) {\n        show = (\n            <Aux>\n                <Collapse\n                    bordered={false}\n                    defaultActiveKey={['1']}\n                    expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n                    <Aux>\n                        <Collapse\n                            bordered={false}\n                            defaultActiveKey={['1']}\n                            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n                            {allFlowToShow}\n\n                        </Collapse>\n                    </Aux>\n                </Collapse>\n            </Aux>\n        );\n    }\n\n\n    return show;\n\n};\n\nexport default NifiFlowDetail;\n","import 'rc-tree/assets/index.css';\nimport React from 'react';\nimport Tree, {TreeNode} from 'rc-tree';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faLayerGroup} from '@fortawesome/free-solid-svg-icons'\nimport axios from \"../../../axios-spring-boot-api-instance\";\nimport * as endpoint from \"../../../Endpoints\";\nimport Aux from \"../../../hoc/Aux/Aux\";\nimport NifiFlowDetail from \"./NifiFlowDetail\";\n// import {Row, RowsWrapper} from \"react-grid-resizable/lib\";\n// import {Card, Col, Row} from \"antd\";\nimport {Col as ColRe, ColsWrapper, Row as RowRe, RowsWrapper} from \"react-grid-resizable/lib\";\nimport {Spin} from \"antd\";\n// import Col from \"antd/lib/descriptions/Col\";\n\nconst element = <FontAwesomeIcon icon={faLayerGroup}/>;\nlet LEVEL = 1;\nconst spin = (\n    <div style={{\n        width: \"inherit\", height: \"inherit\",\n        zIndex: 1, position: \"absolute\",\n        backgroundColor: \"rgba(0, 0, 0, 0.2)\"\n    }}><Spin style={{paddingTop: '200px', zIndex: 2}} tip=\"Loading...\"> </Spin></div>\n);\n\nfunction setLeaf(treeData, curKey, level) {\n    console.log(\"Tree data set leaf\");\n    console.log(treeData);\n    const loopLeaf = (data, lev) => {\n        const l = lev - 1;\n        data.forEach((item) => {\n            if ((item.key.length > curKey.length) ? item.key.indexOf(curKey) !== 0 :\n                curKey.indexOf(item.key) !== 0) {\n                return;\n            }\n            if (item.children) {\n                loopLeaf(item.children, l);\n            } else if (l < 1) {\n                item.isLeaf = true;\n            }\n        });\n    };\n    loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n    console.log(\"oh my god\");\n    const loop = (data) => {\n        if (level < 1 || curKey.length - 3 > level * 2) return;\n        data.forEach((item) => {\n            if (curKey.indexOf(item.key) === 0) {\n                if (item.children) {\n                    loop(item.children);\n                } else {\n                    item.children = child;\n                }\n            }\n        });\n    };\n    loop(treeData);\n    setLeaf(treeData, curKey, level);\n\n    return 1;\n}\n\n/*Display all nifi Process Group in Hierarchy Version 4(Added Resizable component but use another resizable library)*/\nclass NifiFlowHierarchyView2ResizeBox2 extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(props);\n        this.state = {\n            treeData: [],\n            checkedKeys: [],\n            rootFlow: {},\n            childToAppend: [],\n            flowDetail: null,\n            isSpin: false,\n            isSpinDetail: false,\n            loadingDetail: false,\n        };\n    }\n    componentDidMount() {\n        let rcTreeHeight = document.getElementsByClassName('rc-tree')[0].clientHeight;\n        console.log(\"rc tree \", rcTreeHeight);\n\n        // Make a request for a user with a given ID\n        axios.get(endpoint.FLOW_ROOT)\n            .then(res => {\n                console.log(res);\n                setTimeout(() => {\n                    this.setState({\n                        treeData: [\n                            {name: res.data.data.flow.flowInfo.component.name, key: '0-0', id: res.data.data.id},\n                        ],\n                        checkedKeys: ['0-0'],\n                        rootFlow: res.data.data.flow,\n                    });\n                }, 100);\n\n                this.onLoadDataInitial(res.data.data.id);\n\n                axios.get(endpoint.FLOW_BY_ID + res.data.data.id)\n                    .then(res => {\n                        console.log(res);\n                        this.setState({flowDetail: res.data.data});\n                        console.log(this.state.flowDetail.flow);\n                    });\n\n            })\n            .catch(error => {\n                console.log(error)\n            })\n            .finally(res => {\n                console.log(res)\n            });\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let rcTreeHeight = document.getElementsByClassName('rc-tree')[0].clientHeight;\n        console.log(\"rc tree \", rcTreeHeight);\n    }\n\n    generateTreeNodes = () => {\n        // const key = treeNode.props.eventKey;\n        LEVEL++;\n        const arr = [];\n        // console.log(\"this is key: \" + key);\n        if (this.state.childToAppend)\n            for (let i = 0; i < this.state.childToAppend.length; i++) {\n                arr.push({\n                    name: this.state.childToAppend[i].name,\n                    key: `${this.state.childToAppend[i].key}-${i}`,\n                    id: this.state.childToAppend[i].id\n                });\n            }\n\n        console.log('arr');\n        console.log(arr);\n        return arr;\n    };\n    onSelect = (info, fullInfo) => {\n        // this.setState({})\n        this.setState({isSpinDetail: true});\n        console.log('selected', info);\n        console.log('ID: ' + fullInfo.node.props.id);\n        let processGroupId = fullInfo.node.props.id;\n\n        axios.get(endpoint.FLOW_BY_ID + processGroupId)\n            .then(res => {\n                console.log(res);\n                this.setState({flowDetail: res.data.data});\n                console.log(this.state.flowDetail.flow);\n                this.setState({isSpinDetail: false});\n            });\n    };\n\n    onLoadData = (treeNode) => {\n        this.setState({isSpin: true});\n        console.log('on load data...');\n        console.log(treeNode);\n        let updatedData = [];\n        this.setState({childToAppend: []});\n\n        axios.get(endpoint.FLOW_BY_ID + treeNode.props.id)\n            .then(res => {\n                if (res.data.data.flow.processGroups.length > 0)\n                    updatedData = res.data.data.flow.processGroups.map(processGroup => {\n                        return {\n                            name: processGroup.component.name,\n                            key: treeNode.props.pos,\n                            id: processGroup.id\n                        }\n                    });\n                this.setState({childToAppend: updatedData});\n            });\n\n        if (this.state.childToAppend) {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    const treeData = [...this.state.treeData];\n                    console.log(\"Tree Data\");\n                    console.log(treeData);\n                    console.log(this.state.treeData);\n\n                    getNewTreeData(treeData, treeNode.props.eventKey, this.generateTreeNodes(treeNode), LEVEL);\n                    this.setState({treeData});\n                    resolve();\n                    this.setState({isSpin: false});\n                }, 1500);\n            });\n        }\n    };\n\n    onLoadDataInitial = (id) => {\n        this.setState({isSpin: true});\n        console.log('on load data...');\n        let updatedData = [];\n        this.setState({childToAppend: []});\n\n        axios.get(endpoint.FLOW_BY_ID + id)\n            .then(res => {\n                if (res.data.data.flow.processGroups.length > 0)\n                    updatedData = res.data.data.flow.processGroups.map(processGroup => {\n                        return {\n                            name: processGroup.component.name,\n                            key: '0-0',\n                            id: processGroup.id\n                        }\n                    });\n                this.setState({childToAppend: updatedData});\n            });\n        if (this.state.childToAppend) {\n            return new Promise((resolve) => {\n                console.log(\"Resolve\");\n                console.log(resolve);\n                setTimeout(() => {\n                    const treeData = [...this.state.treeData];\n                    console.log(\"Tree Data\");\n                    console.log(treeData);\n                    console.log(this.state.treeData);\n\n                    getNewTreeData(treeData, '0-0', this.generateTreeNodes(), LEVEL);\n                    this.setState({treeData});\n\n                    console.log(\"tree data\");\n                    console.log(treeData);\n\n                    resolve();\n                    this.setState({isSpin: false});\n                }, 1500);\n            });\n        }\n\n    };\n\n    render() {\n        // let elHeight = document.body.clientHeight;\n\n        // console.log(\"This is meme height 21\");\n        // console.log(elHeight);\n\n\n        const loop = (data) => {\n            return data.map((item) => {\n\n                if (item.children) {\n                    return (\n                        <TreeNode id={item.id} style={{margin: '10px 0px 10px 1px'}} icon={element} checkable={false}\n                                  title={item.name}\n                                  key={item.key}>{loop(item.children)}>\n                        </TreeNode>\n                    );\n                }\n                return (\n                    <TreeNode id={item.id} style={{margin: '10px 0px 10px 1px'}} icon={element} checkable={false}\n                              title={item.name}\n                              key={item.key}\n                              isLeaf={item.isLeaf}/>\n                );\n            });\n        };\n        const treeNodes = loop(this.state.treeData);\n\n        let flowDetail = null;\n\n        if (this.state.flowDetail !== null) {\n            flowDetail = <NifiFlowDetail spin={this.state.isSpinDetail} flow={this.state.flowDetail}/>;\n        } else\n            flowDetail = 'Click on process group to show flow detail.';\n\n        return (\n            <Aux>\n                <div style={{background: '#fff', minHeight: 400, overflow: \"scroll\"}} id=\"meme\">\n                    <RowsWrapper>\n                        <RowRe\n                            // initialHeight={document.body.clientHeight}\n                            initialHeight={window.outerHeight}\n                            // initialHeight={100}\n                        >\n                            <ColsWrapper\n                                separatorProps={{\n                                    style: {\n                                        backgroundColor: 'gray',\n                                        width: '2px'\n                                        // border: '1px solid red'\n                                    }\n                                }}>\n\n                                <ColRe style={{minWidth: '200px !important', overflow: 'scroll'}}\n                                       initialWidth={200}>\n\n                                    {this.state.isSpin ? spin : \"\"}\n\n                                    <Tree\n                                        onSelect={this.onSelect}\n                                        // onCheck={this.onCheck} checkedKeys={this.state.checkedKeys}\n                                        loadData={this.onLoadData}\n\n                                        defaultExpandAll={false}\n                                        defaultSelectedKeys={['0-0']}\n                                        defaultExpandedKeys={['0-0']}\n                                        defaultExpandParent={false}\n                                    >\n                                        {treeNodes}\n\n                                    </Tree>\n                                </ColRe>\n\n                                <ColRe style={{minWidth: '200px !important', overflow: 'scroll'}}>\n                                    <RowsWrapper>\n                                        <RowRe>\n                                            <ColsWrapper>\n                                                <ColRe style={{\n                                                    minWidth: '200px !important',\n                                                    width: window.outerWidth,\n                                                    overflow: 'scroll',\n                                                }}>\n                                                    {/*{this.state.isSpinDetail ? spinDetail : \"\"}*/}\n                                                    {flowDetail}\n\n                                                </ColRe>\n                                            </ColsWrapper>\n\n                                        </RowRe>\n                                    </RowsWrapper>\n                                </ColRe>\n\n                            </ColsWrapper>\n                        </RowRe>\n                    </RowsWrapper>\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default NifiFlowHierarchyView2ResizeBox2;\n\n","import React, {Component} from 'react';\n\nimport {Breadcrumb, Button, Col, Divider, Form, message, Row, Spin, Upload, Icon} from 'antd';\nimport Aux from \"../../hoc/Aux/Aux\";\n\nimport * as endpoint from '../../Endpoints';\nimport axios from '../../axios-spring-boot-api-instance'\n\n\nclass UploadTemplate extends Component {\n\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n        nifiRootFlowId: null,\n        fileList: [],\n        uploading: false,\n\n    };\n\n    componentDidMount() {\n        axios.get(endpoint.FLOW_ALL + \"/root-flow-id\")\n            .then(res => {\n                console.log(res);\n                this.setState({nifiRootFlowId: res.data.data});\n            });\n    }\n\n    handleUpload = () => {\n        const { fileList } = this.state;\n        const formData = new FormData();\n        fileList.forEach(file => {\n            formData.append('template', file);\n        });\n\n        this.setState({\n            uploading: true,\n        });\n\n        // You can use any AJAX library you like\n\n        axios.post(endpoint.PROCESS_GROUP + \"/\" + this.state.nifiRootFlowId + '/upload/template', formData)\n            .then(res => {\n                this.setState({\n                    fileList: [],\n                    uploading: false,\n                });\n                message.success('Upload NiFi template successfully.');\n            })\n            .catch(err => {\n                this.setState({\n                    uploading: false,\n                });\n                message.error('Upload NiFi template failed.');\n            });\n    };\n\n    render() {\n\n        const { uploading, fileList } = this.state;\n        const props = {\n            multiple: true,\n            onRemove: file => {\n                this.setState(state => {\n                    const index = state.fileList.indexOf(file);\n                    const newFileList = state.fileList.slice();\n                    newFileList.splice(index, 1);\n                    return {\n                        fileList: newFileList,\n                    };\n                });\n            },\n            beforeUpload: file => {\n                this.setState(state => ({\n                    fileList: [...state.fileList, file],\n                }));\n                return false;\n            },\n            fileList,\n        };\n\n\n        if (this.state.nifiRootFlowId){\n            return (\n                <Aux>\n                    <Row>\n                        <Col span={21}>\n                            <Breadcrumb>\n                                <Breadcrumb.Item>Upload NiFi Template</Breadcrumb.Item>\n                            </Breadcrumb>\n                        </Col>\n\n                    </Row>\n                    <Divider/>\n                    <Row>\n\n                        <Upload {...props}>\n                            <Button>\n                                <Icon type=\"upload\" /> Select File\n                            </Button>\n                        </Upload>\n                        <Button\n                            type=\"primary\"\n                            onClick={this.handleUpload}\n                            disabled={fileList.length === 0}\n                            loading={uploading}\n                            style={{ marginTop: 16 }}\n                        >\n                            {uploading ? 'Uploading' : 'Start Upload'}\n                        </Button>\n                    </Row>\n\n                </Aux>\n            );\n        }\n\n        return <Spin style={{paddingTop: '50%'}} tip=\"Loading...\"> </Spin>;\n\n    }\n}\n\nconst WrappedUploadTemplateForm = Form.create({name: 'register'})(UploadTemplate);\n\nexport default WrappedUploadTemplateForm;\n","import React from 'react';\nimport {Badge, Button, Card, Col, Collapse, Empty, Icon, Row, Spin, Statistic, Table, Tabs} from 'antd';\nimport Aux from '../../../hoc/Aux/Aux';\nimport NifiProcessGroup from '../../NifiProcessGroup/NifiProcessGroup';\nimport NifiRemoteProcessGroup from '../../NifiRemoteProcessGroup/NifiRemoteProcessGroup';\nimport NifiProcessor from '../../NifiProcessor/NifiProcessor';\nimport NifiConnection from '../../NifiConnection/NifiConnection';\nimport NifiOutputPort from '../../NifiOutputPort/NifiOutputPort';\nimport NifiInputPort from '../../NifiInputPort/NifiInputPort';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport * as tableColumns from \"../../../TableColumns\";\n\nimport {\n    faAlignJustify,\n    faArrowAltCircleDown,\n    faArrowAltCircleUp,\n    faArrowDown,\n    faArrowUp,\n    faChessBoard,\n    faExclamationTriangle,\n    faExternalLinkAlt,\n    faList,\n    faPlay,\n    faStop\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {Link} from \"react-router-dom\";\nimport * as endpoint from \"../../../Endpoints\";\n\nconst {Panel} = Collapse;\nconst customFlowPanelStyle = {\n    background: '#f7f7f7',\n    borderRadius: 4,\n    border: 0,\n    marginBottom: '15px',\n    overflow: 'hidden',\n};\nconst {TabPane} = Tabs;\n\nconst NifiFlowDetailSearch = (props) => {\n\n    console.log(\"PROPS: \", props);\n\n    function callback(key) {\n        console.log(key);\n    }\n\n    // let show = <Spin tip=\"Loading...\"> </Spin>;\n    let show = 'Click on process group to show the detail here.';\n    // let show = null;\n\n    let contentList = {\n        status: null,\n        components: null,\n        bulletins: null,\n    };\n\n    if(!props.data.flow.flow.flowInfo)\n        return ;\n\n    contentList.status = (\n        <Row gutter={16}>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Active Threads\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.activeThreadCount}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faChessBoard} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Queued\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.queued}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Input\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.input}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleDown} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Output\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.output}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleUp} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Read\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.read}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faAlignJustify} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Written\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.written}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faAlignJustify} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Received\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.received}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faArrowDown} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Sent\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.status.aggregateSnapshot.sent}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faArrowUp} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n\n        </Row>\n    );\n    contentList.components = (\n        <Row gutter={16}>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"RUNNING COMPONENTS\"\n                        value={props.data.flow.flow.flowInfo.component.runningCount}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faPlay} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"STOPPED COMPONENTS\"\n                        value={props.data.flow.flow.flowInfo.component.stoppedCount}\n                        valueStyle={{color: 'rgb(209, 134, 134)'}}\n                        prefix={<FontAwesomeIcon icon={faStop} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"INVALID COMPONENTS\"\n                        value={props.data.flow.flow.flowInfo.component.invalidCount}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faExclamationTriangle} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title=\"DISABLED COMPONENTS\"\n                        value={props.data.flow.flow.flowInfo.component.disabledCount}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faExclamationTriangle} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Input port count\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.component.inputPortCount}\n                        valueStyle={{color: '#cf9f5d'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleDown} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Output Port Count\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.component.outputPortCount}\n                        valueStyle={{color: '#728e9b'}}\n                        prefix={<FontAwesomeIcon icon={faArrowAltCircleUp} size=\"xs\"/>}\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Active Remote Port Count\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.component.activeRemotePortCount}\n                        valueStyle={{color: 'rgb(125, 199, 160)'}}\n                        prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n            <Col span={6}>\n                <Card>\n                    <Statistic\n                        title={\"Inactive Remote Port Count\".toUpperCase()}\n                        value={props.data.flow.flow.flowInfo.component.inactiveRemotePortCount}\n                        valueStyle={{color: 'rgb(209, 134, 134)'}}\n                        prefix={<FontAwesomeIcon icon={faList} size=\"xs\"/>}\n                        // suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n        </Row>\n    );\n\n    let flowBulletins = [];\n    if (props.data.flow.flow.flowInfo.bulletins.length) {\n        try {\n            flowBulletins = props.data.flow.flow.flowInfo.bulletins.map(bulletin => {\n                return {\n                    key: bulletin.bulletin.id,\n                    timestamp: bulletin.bulletin.timestamp,\n                    level: bulletin.bulletin.level,\n                    category: bulletin.bulletin.category,\n                    message: bulletin.bulletin.message,\n                };\n            });\n            console.log(flowBulletins);\n            contentList.bulletins = (\n                <Table\n                    size='small' columns={tableColumns.bulletinsColumns}\n                    dataSource={flowBulletins} bordered={true}/>\n            );\n        } catch (e) {\n            console.log('Meme error');\n            contentList.bulletins = (\n                <Card>\n                    <Empty\n                        description={'Components with bulletins(errors) may be deleted on NiFi! And the error indicator will be disappear within 5 minutes.'}\n                        image={Empty.PRESENTED_IMAGE_SIMPLE}/>\n                </Card>\n\n            );\n        }\n\n    } else {\n        contentList.bulletins = (\n            <Card>\n                <Empty description={'5분 내 나타난 에러 로그 기록이 없습니다!'} image={Empty.PRESENTED_IMAGE_SIMPLE}\n                       style={{color: 'rgba(125, 199, 160, 1)'}}/>\n            </Card>\n        );\n    }\n\n    let processorGroupDataToShow = [];\n    let remoteProcessorGroupDataToShow = [];\n    let processorDataToShow = [];\n    let inputPortDataToShow = [];\n    let outputPortDataToShow = [];\n    let connectionDataToShow = [];\n\n    if (props.data.flow.flow.processGroups.length) {\n        const data = props.data.flow.flow.processGroups.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                transferred: component.status.aggregateSnapshot.transferred,\n                readWrite: component.status.aggregateSnapshot.read + ' / ' + component.status.aggregateSnapshot.written,\n                input: component.status.aggregateSnapshot.input,\n                output: component.status.aggregateSnapshot.output,\n                sent: component.status.aggregateSnapshot.sent,\n                received: component.status.aggregateSnapshot.received,\n            };\n        });\n\n        processorGroupDataToShow = (\n            <NifiProcessGroup data={data} count={props.data.flow.flow.processGroups.length}/>\n        );\n    }\n\n    if (props.data.flow.flow.remoteProcessGroups.length) {\n        const data = props.data.flow.flow.remoteProcessGroups.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                targetUri: component.status.targetUri,\n                transmitting: component.status.transmissionStatus,\n                sent: component.status.aggregateSnapshot.sent,\n                received: component.status.aggregateSnapshot.received,\n            };\n        });\n\n        remoteProcessorGroupDataToShow = (\n            <NifiRemoteProcessGroup data={data} count={props.data.flow.flow.remoteProcessGroups.length}/>\n        );\n    }\n\n    if (props.data.flow.flow.processors.length) {\n        const data = props.data.flow.flow.processors.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                type: component.status.aggregateSnapshot.type,\n                processGroup: props.data.flow.flow.flowInfo.status.name,\n                runStatus: component.status.aggregateSnapshot.runStatus,\n                input: component.status.aggregateSnapshot.input,\n                output: component.status.aggregateSnapshot.output,\n                readWrite: component.status.aggregateSnapshot.read + ' / ' + component.status.aggregateSnapshot.written,\n                tasksDuration: component.status.aggregateSnapshot.tasks + ' / ' + component.status.aggregateSnapshot.tasksDuration,\n            };\n        });\n\n        processorDataToShow = (\n            <NifiProcessor data={data} count={props.data.flow.flow.processors.length}/>\n        );\n    }\n\n    if (props.data.flow.flow.inputPorts.length) {\n        const data = props.data.flow.flow.inputPorts.map(component => {\n            return {\n                key: component.id,\n                name: component.status.aggregateSnapshot.name,\n                runStatus: component.status.aggregateSnapshot.runStatus,\n                input: component.status.aggregateSnapshot.input,\n            };\n        });\n\n        inputPortDataToShow = (\n            <NifiInputPort count={props.data.flow.flow.inputPorts.length} data={data}/>\n        );\n    }\n\n    if (props.data.flow.flow.outputPorts.length) {\n        const data = props.data.flow.flow.outputPorts.map(component => {\n            return {\n                key: component.id,\n                name: component.status.aggregateSnapshot.name,\n                runStatus: component.status.aggregateSnapshot.runStatus,\n                output: component.status.aggregateSnapshot.output,\n            };\n        });\n\n        outputPortDataToShow = (\n            <NifiOutputPort data={data} count={props.data.flow.flow.outputPorts.length}/>\n        );\n    }\n\n    if (props.data.flow.flow.connections.length) {\n        const data = props.data.flow.flow.connections.map(component => {\n            return {\n                key: component.id,\n                name: component.component.name,\n                sourceName: component.component.source.name,\n                destinationName: component.component.destination.name,\n                input: component.status.aggregateSnapshot.input,\n                output: component.status.aggregateSnapshot.output,\n                queued: component.status.aggregateSnapshot.queued,\n            };\n        });\n        connectionDataToShow = (\n            <NifiConnection data={data} count={props.data.flow.flow.connections.length}/>\n        );\n    }\n\n    const header = (\n        <div>\n            <span style={{fontWeight: 'bold', fontSize: '20px', color: 'rgb(24, 144, 255)'}}>\n                {props.data.flow.flow.flowInfo.status.name}\n            </span>\n            &nbsp;&nbsp;&nbsp;\n            <Link\n                target=\"_blank\"\n                to={{pathname: endpoint.LINK_TO_NIFI_INSTANCE + props.data.flow.id + \"&componentIds=\"}}>\n                <Button key=\"3\"\n                        type=\"danger\"\n                        size=\"small\"><FontAwesomeIcon icon={faExternalLinkAlt} size=\"xs\"/></Button>\n            </Link>\n        </div>);\n\n\n    const allFlowToShow = (\n        <Panel\n            // header={props.data.flow.flow.flowInfo.status.name}\n            header={header}\n            key={1} style={customFlowPanelStyle}>\n\n            <div>\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Status\" key=\"1\">\n                        {contentList.status}\n                    </TabPane>\n                    <TabPane tab=\"Components\" key=\"2\">\n                        {contentList.components}\n                    </TabPane>\n                    <TabPane tab={<Badge\n                        count={props.data.flow.flow.flowInfo.bulletins.length}><span>Bulletins&nbsp;&nbsp;&nbsp;</span></Badge>}\n                             key=\"3\">\n                        {contentList.bulletins}\n                    </TabPane>\n                </Tabs>\n            </div>\n\n            {processorGroupDataToShow}\n\n            {remoteProcessorGroupDataToShow}\n\n            {processorDataToShow}\n\n            {inputPortDataToShow}\n\n            {outputPortDataToShow}\n\n            {connectionDataToShow}\n\n        </Panel>\n    );\n\n    if (props.spin)\n        return (\n            <div style={{\n                zIndex: 99999, paddingTop: \"50px\"\n            }}><Spin style={{paddingTop: '0px', zIndex: 2}} tip={\"Loading...\"}> </Spin></div>\n        );\n\n    if (allFlowToShow) {\n        show = (\n            <Aux>\n                <Collapse\n                    bordered={false}\n                    defaultActiveKey={['1']}\n                    expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n                    <Aux>\n                        <Collapse\n                            bordered={false}\n                            defaultActiveKey={['1']}\n                            expandIcon={({isActive}) => <Icon type=\"caret-right\" rotate={isActive ? 90 : 0}/>}>\n\n                            {allFlowToShow}\n\n                        </Collapse>\n                    </Aux>\n                </Collapse>\n            </Aux>\n        );\n    }\n\n\n    return show;\n\n};\n\nexport default NifiFlowDetailSearch;\n","import React, {Component} from 'react';\nimport DataTable from 'react-data-table-component';\nimport {TextField} from \"@material-ui/core\";\n\nimport axios from \"../../axios-spring-boot-api-instance\";\nimport * as endpoint from '../../Endpoints';\nimport {Button, Spin} from \"antd\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport NifiFlowDetailSearch from \"../NifiInstance/HierarchyView/NifiFlowDetailSearch\";\n// import RefreshIcon from '@material-ui/icons/Refresh';\n// import Fab from '@material-ui/core/Fab';\n\n\n// import OutlinedInput from \"@material-ui/core/OutlinedInput\";\n// import ReactDOM from \"react-dom\";\n\n\nconst styles = theme => ({\n    rootButton: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n\n    root: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n    },\n    formControl: {\n        margin: theme.spacing.unit,\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing.unit\n    },\n    formControl1: {\n        margin: theme.spacing(1),\n        minWidth: 100,\n    },\n    textField: {\n        width: 400,\n        marginRight: 10\n    },\n});\nconst columns = [\n    {\n        name: 'Name',\n        selector: 'name',\n        sortable: true,\n        width: '50%'\n\n    },\n    {\n        name: 'Level',\n        selector: 'level',\n        sortable: true,\n        width: '10%',\n        style: {\n            backgroundColor: 'rgba(63, 195, 128, 1)',\n            color: 'white',\n        },\n    },\n    {\n        name: 'URI',\n        selector: 'uri',\n        sortable: true,\n    },\n];\n\nclass SearchProcessor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingButton: false,\n            buttonText: 'Refresh',\n            iconLoading: false,\n\n            processGroups: [],\n            inputSearchLevel: \"\",\n            inputSearchName: \"\",\n            level: null,\n            allLevel: null,\n            inputLabelRef: undefined,\n            flowDetail: null,\n            isSpinDetail: false,\n\n            paginationTotalRows: 0,\n            perPage: 10,\n            loading: false,\n            page: 0,\n\n        };\n    }\n\n    handleChangeLevel(level) {\n\n        console.log(level);\n\n        this.setState({\n            processGroups: [],\n            inputSearchLevel: level,\n            loading: true,\n            paginationTotalRows: 0\n        });\n\n        axios.get(endpoint.SEARCH + \"?name=\" + this.state.inputSearchName + \"&level=\" + level + \"&page=0&limit=\" + this.state.perPage)\n            .then(res => {\n                console.log(res);\n                const updatedData = res.data.data.map(component => {\n                    return {\n                        key: component.flowId,\n                        id: component.id,\n                        flowId: component.flowId,\n                        name: component.name,\n                        level: component.level,\n                        uri: component.uri,\n                        flow: component.processGroupFlow\n                    };\n                });\n\n                this.setState({\n                    processGroups: updatedData,\n                    // paginationTotalRows: res.data.data.total_record,\n                    paginationTotalRows: res.data.total_record,\n                    loading: false\n                });\n\n            });\n    }\n\n    /*setLevel = (level) => {\n        this.setState({level: level});\n    };\n\n    setInputLabelRef = (refParam) => {\n        this.setState({inputLabelRef: refParam});\n    };*/\n\n    handleSearchName = async (nameParam) => {\n        console.log(nameParam);\n\n        const name = nameParam.target.value;\n\n        console.log(name);\n\n        this.setState({\n            inputSearchName: name,\n            processGroups: [],\n            loading: true,\n            page: 0,\n            paginationTotalRows: 0\n        });\n\n        const res = await axios.get(endpoint.SEARCH + \"?name=\" + name + \"&level=\" + this.state.inputSearchLevel + \"&page=0&limit=\" + this.state.perPage);\n\n        // .then(res => {\n        console.log(res);\n        const updatedData = res.data.data.map(component => {\n            return {\n                key: component.flowId,\n                id: component.id,\n                flowId: component.flowId,\n                name: component.name,\n                level: component.level,\n                uri: component.uri,\n                flow: component.processGroupFlow\n            };\n        });\n\n        this.setState({\n            processGroups: updatedData,\n            // paginationTotalRows: res.data.data.total_record,\n            paginationTotalRows: res.data.total_record,\n            loading: false\n        });\n        // });\n    };\n\n    /*handleSearchLevel = (levelParam) => {\n        const level = levelParam.target.value;\n        this.setState({\n            inputSearchLevel: level\n        });\n        axios.get(endpoint.SEARCH + \"?name=\" + this.state.inputSearchName + \"&level=\" + level)\n            .then(res => {\n                console.log(res);\n                const updatedData = res.data.data.map(component => {\n                    return {\n                        key: component.flowId,\n                        flowId: component.flowId,\n                        name: component.name,\n                        level: component.level,\n                        uri: component.uri,\n                    };\n                });\n\n                this.setState({processGroups: updatedData});\n            });\n    };*/\n\n    handleExpandRow = (status, record) => {\n        this.setState({flowDetail: null, isSpinDetail: true});\n        console.log(status);\n        console.log(record);\n\n        axios.get(endpoint.FLOW_BY_ID + record.flowId)\n            .then(res => {\n                console.log(res);\n                this.setState({flowDetail: res.data.data});\n                console.log(this.state.flowDetail.flow);\n                this.setState({isSpinDetail: false});\n            });\n    };\n\n    handlePageChange = async page => {\n        console.log(\"handlePageChange\");\n\n        if (page > 0)\n            page--;\n        else page = 0;\n\n        const perPage = this.state.perPage;\n\n        this.setState({loading: true});\n\n        const response = await axios.get(\n            endpoint.SEARCH + \"?name=\" + this.state.inputSearchName\n            + \"&level=\" + this.state.inputSearchLevel\n            + \"&page=\" + page\n            + \"&limit=\" + perPage\n        );\n\n        const updatedData = response.data.data.map(component => {\n            return {\n                key: component.flowId,\n                id: component.id,\n                flowId: component.flowId,\n                name: component.name,\n                level: component.level,\n                uri: component.uri,\n                flow: component.processGroupFlow\n            };\n        });\n\n        this.setState({\n            loading: false,\n            processGroups: updatedData,\n\n            paginationTotalRows: response.data.total_record,\n            page: page,\n        });\n    };\n\n    handlePerRowsChange = async (perPage, page) => {\n        console.log(\"handlePerRowsChange\");\n\n        if (page > 0)\n            page--;\n        else page = 0;\n\n        this.setState({loading: true});\n\n        const response = await axios.get(\n            endpoint.SEARCH + \"?name=\" + this.state.inputSearchName\n            + \"&level=\" + this.state.inputSearchLevel\n            + \"&page=\" + page\n            + \"&limit=\" + perPage\n        );\n\n        const updatedData = response.data.data.map(component => {\n            return {\n                key: component.flowId,\n                id: component.id,\n                flowId: component.flowId,\n                name: component.name,\n                level: component.level,\n                uri: component.uri,\n                flow: component.processGroupFlow\n            };\n        });\n\n        this.setState({\n            loading: false,\n            processGroups: updatedData,\n            perPage: perPage,\n\n            paginationTotalRows: response.data.total_record,\n            page: page\n        });\n    };\n\n    enterLoading = () => {\n\n        this.setState({\n            processGroups: [],\n            loading: true,\n            page: 0,\n            paginationTotalRows: 0,\n            loadingButton: true,\n            buttonText: 'Refreshing...'\n        });\n\n        axios.get(endpoint.SEARCH + \"?name=\" + this.state.inputSearchName + \"&level=\" + this.state.inputSearchLevel + \"&page=0&limit=\" + this.state.perPage)\n            .then(res => {\n                console.log(res);\n                const updatedData = res.data.data.map(component => {\n                    return {\n                        key: component.flowId,\n                        id: component.id,\n                        flowId: component.flowId,\n                        name: component.name,\n                        level: component.level,\n                        uri: component.uri,\n                        flow: component.processGroupFlow\n                    };\n                });\n\n                this.setState({\n                    processGroups: updatedData,\n                    paginationTotalRows: res.data.total_record,\n                    loading: false,\n                    loadingButton: false,\n                    buttonText: 'Refresh'\n                });\n            });\n    };\n\n    componentDidMount() {\n        axios.get(endpoint.SEARCH)\n            .then(res => {\n                console.log(res);\n                const updatedData = res.data.data.map(component => {\n                    return {\n                        key: component.flowId,\n                        flowId: component.flowId,\n                        name: component.name,\n                        level: component.level,\n                        uri: component.uri,\n                        id: component.id,\n                        flow: component.processGroupFlow\n                    };\n                });\n\n                console.log(\"Process Groups: \", updatedData);\n\n                this.setState({processGroups: updatedData, paginationTotalRows: res.data.total_record});\n            });\n\n        axios.get(endpoint.ALL_LEVEL)\n            .then(res => {\n                console.log(res);\n                let i = 1;\n                const levels = res.data.data.map(level => {\n                    i++;\n                    return (\n                        <MenuItem key={i} value={level}>{level}</MenuItem>\n                    )\n                });\n                this.setState({allLevel: levels});\n            });\n    }\n\n    render() {\n        const {classes} = this.props;\n        /*let detailFlow = null;\n        if (this.state.flowDetail && this.state.isSpinDetail === false) {\n            detailFlow = <NifiFlowDetail spin={this.state.isSpinDetail} flow={this.state.flowDetail}/>;\n        }*/\n        /*const labelOffsetWidth = this.state.inputLabelRef\n            ? ReactDOM.findDOMNode(this.state.inputLabelRef).offsetWidth\n            : 0;*/\n\n        let show = <Spin style={{paddingLeft: '50%'}} tip={\"Loading...\"}/>;\n\n        const data = this.state.processGroups;\n\n        if (data && this.state.allLevel)\n            return (\n                <div>\n                    <DataTable\n                        title=\"NiFi Process Groups List\"\n                        columns={columns}\n                        data={data}\n                        defaultSortField=\"title\"\n                        selectableRows={false}\n                        selectableRowsHighlight={true}\n                        expandableRows={true}\n                        expandOnRowClicked={true}\n                        // onRowExpandToggled={(status, record) => this.handleExpandRow(status, record)}\n                        expandableRowsComponent={<NifiFlowDetailSearch spin={false}\n                                                                 flow={data}/>}\n                        progressPending={this.state.loading}\n                        progressComponent={<Spin tip={\"Loading...\"}/>}\n                        pagination={true}\n                        paginationTotalRows={this.state.paginationTotalRows}\n                        paginationPerPage={10}\n                        paginationServer={true}\n\n                        onChangeRowsPerPage={this.handlePerRowsChange}\n                        onChangePage={this.handlePageChange}\n\n                        paginationResetDefaultPage={true}\n                        paginationDefaultPage={this.state.page + 1}\n\n                        highlightOnHover={true}\n                        striped={true}\n                        pointerOnHover={true}\n                        noTableHead={false}\n                        persistTableHead={false}\n                        noHeader={false}\n                        subHeader={true}\n                        subHeaderComponent={\n                            (\n                                <div style={{display: 'flex', alignItems: 'center'}}>\n\n                                    {/*<FormControl variant=\"outlined\" className={classes.formControl1}>\n                                        <InputLabel\n                                            ref={this.setInputLabelRef}\n                                            htmlFor=\"outlined-level-simple\"\n                                        >\n                                            Level\n                                        </InputLabel>\n                                        <Select\n                                            value={this.state.level}\n                                            onChange={e => {\n                                                this.setLevel(e.target.value)\n                                            }}\n                                            input={\n                                                <OutlinedInput\n                                                    labelWidth={labelOffsetWidth}\n                                                    name=\"level\"\n                                                    id=\"outlined-level-simple\"\n                                                />\n                                            }\n                                        >\n                                            <MenuItem value=\"\">\n                                                <em>None</em>\n                                            </MenuItem>\n                                            <MenuItem value={0}>0</MenuItem>\n                                            <MenuItem value={1}>1</MenuItem>\n                                            <MenuItem value={2}>2</MenuItem>\n                                            {this.state.allLevel}\n                                        </Select>\n                                    </FormControl>*/}\n\n                                    <FormControl className={classes.formControl}>\n                                        <InputLabel htmlFor=\"level\">Level</InputLabel>\n                                        <Select\n                                            name=\"level\"\n                                            value={this.state.level}\n                                            onChange={event => this.handleChangeLevel(event.target.value)}\n                                            input={<Input id=\"level\"/>}\n                                        >\n                                            <MenuItem key={1} value=\"\"><em>None</em></MenuItem>\n\n                                            {this.state.allLevel}\n\n                                        </Select>\n                                    </FormControl>\n\n                                    {/*<TextField\n                                        className={classes.textField}\n                                        value={this.state.inputSearchLevel}\n                                        onChange={level => this.handleSearchLevel(level)}\n                                        id=\"outlined-basic\"\n                                        label=\"Search Level...\"\n                                        variant=\"outlined\" size=\"small\" style={{marginRight: '15px'}}/>*/}\n\n                                    <TextField\n                                        className={classes.textField}\n                                        value={this.state.inputSearchName}\n                                        onChange={name => this.handleSearchName(name)}\n                                        id=\"outlined-basic\" label=\"Search Name...\"\n                                        variant=\"outlined\" size=\"small\"/>\n\n                                    {/*<div className={classes.rootButton}>\n                                        <Fab color=\"primary\" aria-label=\"add\">\n                                            <RefreshIcon/>\n                                        </Fab>\n                                    </div>*/}\n\n                                    <Button type=\"primary\" loading={this.state.loadingButton}\n                                            onClick={this.enterLoading}>\n                                        {this.state.buttonText}\n                                    </Button>\n\n                                </div>\n                            )\n                        }\n                        subHeaderAlign={\"left\"}\n                        fixedHeader={false}\n                        fixedHeaderScrollHeight=\"300px\"\n                    />\n                </div>\n\n            );\n        else return show;\n    }\n}\n\nSearchProcessor\n    .propTypes = {\n    classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(SearchProcessor);\n","import React, {Component} from 'react';\nimport {NavLink, Route, Switch} from \"react-router-dom\";\nimport logo from '../../logo.svg';\nimport Aux from '../Aux/Aux';\n\nimport NifiProcessorDetail from \"../../components/NifiProcessor/NifiProcessorDetail/NifiProcessorDetail\";\nimport NifiConnectionDetail from \"../../components/NifiConnection/NifiConnectionDetail/NifiConnectionDetail\";\nimport NifiProcessGroup from \"../../components/NifiProcessGroup/NifiProcessGroup\";\n\n\nimport {Layout, Menu} from 'antd';\nimport Dashboard from \"../../components/Dashboard/Dashboard\";\nimport {faCube, faCubes, faTachometerAlt, faThList, faUpload} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport NifiRegistryBucket from \"../../components/NifiRegistry/NifiRegistryBucket/NifiRegistryBucket\";\nimport NifiRegistryItem from \"../../components/NifiRegistry/NifiRegistryItem/NifiRegistryItem\";\nimport NifiFlowHierarchyView2ResizeBox2\n    from \"../../components/NifiInstance/HierarchyView/NifiFlowHierarchyView2ResizeBox2\";\nimport {faGitAlt} from \"@fortawesome/free-brands-svg-icons\";\nimport WrappedUploadTemplateForm from \"../../components/NifiTemplate/UploadTemplate\";\nimport SearchProcessor from \"../../components/SearchProcessor/SearchProcessor\";\n\nconst {Header, Content, Footer, Sider} = Layout;\nconst {SubMenu} = Menu;\n\n/*\n* Main Layout\n* */\nclass MainLayout extends Component {\n    state = {\n        collapsed: false,\n    };\n\n    onCollapse = collapsed => {\n        console.log(collapsed);\n        this.setState({collapsed});\n    };\n\n    render() {\n\n        var headerStyle = {\n            padding: 0\n        };\n\n        return (\n            <Aux>\n                <Layout style={{minHeight: '100vh'}}>\n\n                    {/*Sidebar Menu*/}\n                    <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n                        <div className=\"logo\"/>\n                        <NavLink to={{pathname: \"/\"}}><img src={logo} style={{height: '66px', width: '100%'}}\n                                                           alt=\"\"/></NavLink>\n                        {/*<Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\"*/}\n                        <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\"\n                              style={{borderTop: '4px solid #1890ff'}}>\n                            <Menu.Item key=\"1\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/\"\n                                }}>\n                                    <FontAwesomeIcon icon={faTachometerAlt} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Dashboard</span>\n                                </NavLink>\n                            </Menu.Item>\n\n                            {/*<Menu.Item key=\"2\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/instance\"\n                                }}>\n                                    <FontAwesomeIcon icon={faThList} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Nifi Flows</span>\n                                </NavLink>\n                            </Menu.Item>*/}\n\n                            {/*<Menu.Item key=\"3\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/instance-hierarchy-view\"\n                                }}>\n                                    <FontAwesomeIcon icon={faThList} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Hierarchy View Flow V1</span>\n                                </NavLink>\n                            </Menu.Item>*/}\n\n                            {/*<Menu.Item key=\"4\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/instance-hierarchy-view-2\"\n                                }}>\n                                    <FontAwesomeIcon icon={faThList} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Hierarchy View Flow V2</span>\n                                </NavLink>\n                            </Menu.Item>*/}\n\n                            <Menu.Item key=\"2\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/instance-hierarchy-view-2-resize-box2\"\n                                }}>\n                                    <FontAwesomeIcon icon={faThList} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Nifi Processors</span>\n                                </NavLink>\n                            </Menu.Item>\n\n                            <Menu.Item key=\"3\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/search-processor\"\n                                }}>\n                                    <FontAwesomeIcon icon={faThList} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Search Processors</span>\n                                </NavLink>\n                            </Menu.Item>\n\n                            <Menu.Item key=\"4\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/nifi-upload-template\"\n                                }}>\n                                    {/*<FontAwesomeIcon icon={faFileUpload} size=\"lg\"/>*/}\n                                    <FontAwesomeIcon icon={faUpload} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Upload Template</span>\n                                </NavLink>\n                            </Menu.Item>\n\n\n                            {/*<Menu.Item key=\"6\" style={{marginTop: '0px'}}>\n                                <NavLink to={{\n                                    pathname: \"/instance-hierarchy-view-2-resize-box2\"\n                                }}>\n                                    <FontAwesomeIcon icon={faThList} size=\"lg\"/>\n                                    <span style={{paddingLeft: '10px'}}>Hierarchy View Flow v2</span>\n                                </NavLink>\n                            </Menu.Item>*/}\n\n                            <SubMenu\n                                key=\"sub1\"\n                                title={<span>\n                                        <FontAwesomeIcon icon={faGitAlt} size=\"lg\"/>\n                                        <span style={{paddingLeft: '10px'}}>Nifi Registry</span>\n                                    </span>\n                                }>\n\n                                <Menu.Item key=\"7\">\n                                    <NavLink to={{\n                                        pathname: \"/nifi-registry-bucket\"\n                                    }}>\n                                        <FontAwesomeIcon icon={faCubes} size=\"lg\"/>\n                                        <span style={{paddingLeft: '10px'}}>Buckets</span>\n                                    </NavLink>\n                                </Menu.Item>\n\n                                <Menu.Item key=\"8\">\n                                    <NavLink to={{\n                                        pathname: \"/nifi-registry-item\"\n                                    }}>\n                                        <FontAwesomeIcon icon={faCube} size=\"lg\"/>\n                                        <span style={{paddingLeft: '10px'}}>Items</span>\n                                    </NavLink>\n                                </Menu.Item>\n                            </SubMenu>\n                        </Menu>\n                    </Sider>\n                    {/*End Sidebar Menu*/}\n\n                    <Layout>\n                        <Header className=\"header\" style={headerStyle}>\n\n                            <div className=\"logo\"/>\n\n                            <Menu\n                                theme=\"dark\"\n                                mode=\"horizontal\"\n                                defaultSelectedKeys={['2']}\n                                style={{lineHeight: '60px', borderBottom: '4px solid #1890ff'}}\n                            >\n                                <Menu.Item disabled={true} key=\"1\" style={{padding: 0}}>\n                                    <span style={{fontWeight: 'bold', fontSize: '30px'}}>Nifi Monitoring System</span>\n                                </Menu.Item>\n                            </Menu>\n                        </Header>\n\n                        <Content style={{margin: '22px 16px 16px 16px'}}>\n\n                            <div>\n\n                                <Route path=\"/\" component={Dashboard} exact={true}/>\n\n                                <Switch>\n                                    <Route path=\"/instance-hierarchy-view-2-resize-box2\"\n                                           component={NifiFlowHierarchyView2ResizeBox2} exact={true}/>\n\n                                    <Route path=\"/search-processor\"\n                                           component={SearchProcessor} exact={true}/>\n\n                                    <Route path=\"/nifi-upload-template\" component={WrappedUploadTemplateForm}\n                                           exact={true}/>\n\n                                    <Route path=\"/nifi-registry-bucket\" component={NifiRegistryBucket} exact={true}/>\n                                    <Route path=\"/nifi-registry-item\" component={NifiRegistryItem} exact={true}/>\n\n                                    <Route path=\"/component-detail/processors/:id\" component={NifiProcessorDetail}\n                                           exact/>\n                                    <Route path=\"/component-detail/connections/:id\" component={NifiConnectionDetail}\n                                           exact/>\n                                    <Route path=\"/component-detail/process-groups/:id\" component={NifiProcessGroup}\n                                           exact/>\n                                </Switch>\n                            </div>\n                        </Content>\n                        <Footer style={{textAlign: 'center'}}>Nifi Monitoring Systems ©2018 Created by CBNU Big Data\n                            Lab</Footer>\n\n                        {/*<h1>API_URL: {window._env_.API_URL}</h1>*/}\n                        {/*<h1>API_PORT: {window._env_.API_PORT}</h1>*/}\n                    </Layout>\n                </Layout>\n            </Aux>\n        );\n    }\n}\n\nexport default MainLayout;\n","import React from 'react';\nimport MainLayout from \"./hoc/Layout/MainLayout\";\n\nimport {BrowserRouter} from \"react-router-dom\";\nimport 'antd/dist/antd.css';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            {/*<div className={classes.App}>*/}\n            <div>\n                <MainLayout/>\n            </div>\n\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}